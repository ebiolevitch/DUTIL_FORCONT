<%@ page language="java" contentType="text/html; charset=UTF-8"	pageEncoding="UTF-8"%><!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml" lang="fr_FR" xml:lang="fr_FR">	<head>		<meta http-equiv="content-type" content="text/html; charset=UTF-8" />		<title>Kit php pour customisation graphique</title>		<link rel="shortcut icon" type="image/x-icon" href="http://www.univ-nantes.fr/images/favicon.ico" />		<link rel="icon" type="image/png" href="http://www.univ-nantes.fr/images/favicon.png" />		<meta http-equiv="pragma" content="no-cache" />		<meta http-equiv="imagetoolbar" content="no" />		<meta name="mssmarttagspreventparsing" content="true" />		<link rel="schema.DC" href="http://purl.org/dc/elements/1.1/" />		<meta name="DC.Title" content="Universit&eacute; de Nantes - Les actualit&eacute;s sur les formations, l'orientation, l'insertion professionnelle" />		<meta name="DC.Creator" content="Anne-Christelle SUIRE" />		<meta name="DC.Subject" lang="fr-FR" content="formation,recherche,universite,university,france,nantes" />		<meta name="DC.Description" lang="fr-FR" content="" />		<meta name="DC.Publisher" content="Anne-Christelle SUIRE" />		<meta name="DC.Date.created" scheme="W3CDTF" content="20081212" />		<meta name="DC.Date.modified" scheme="W3CDTF" content="20111214" />		<meta name="DC.Language" scheme="RFC3066" content="fr-FR" />		<meta name="DC.Rights" content="Copyright &copy; Universit&eacute; de Nantes" />		<meta name="author" lang="fr-FR" content="Anne-Christelle SUIRE" />		<meta name="keywords" content="formation,recherche,universite,university,france,nantes" />		<meta name="Date-Creation-yyyymmdd" content="20081212" />		<meta name="Date-Revision-yyyymmdd" content="20111214" />		<meta name="copyright" content="Copyright &copy; Universit&eacute; de Nantes" />		<meta name="reply-to" content="webmaster@univ-nantes.fr" />		<meta name="category" content="Internet" />		<meta name="robots" content="index, follow" />		<meta name="distribution" content="global" />		<meta name="identifier-url" content="http://www.univ-nantes.fr/" />		<meta name="resource-type" content="document" />		<meta name="expires" content="-1" />		<meta name="Generator" content="K-Sup" />		<meta name="Formatter" content="K-Sup" />		<link rel="stylesheet" type="text/css" media="screen" href="http://www.univ-nantes.fr/jsp/styles/defaut/reset.css" title="defaut" />		<link rel="stylesheet" type="text/css" media="screen" href="http://www.univ-nantes.fr/jsp/styles/defaut/police.css" title="defaut" />		<link rel="stylesheet" type="text/css" media="screen" href="http://www.univ-nantes.fr/jsp/styles/defaut/ecran.css" title="defaut" />		<link rel="stylesheet" type="text/css" media="screen" href="http://www.univ-nantes.fr/jsp/styles/defaut/scroll.css" title="defaut" />		<link rel="stylesheet" type="text/css" media="screen" href="http://www.univ-nantes.fr/jsp/styles/defaut/formulaires.css" title="defaut" />		<link rel="stylesheet" type="text/css" media="screen" href="http://www.univ-nantes.fr/jsp/styles/defaut/degrades.css" title="defaut" />		<link rel="stylesheet" type="text/css" media="screen" href="http://www.univ-nantes.fr/jsp/styles/defaut/social.css" title="defaut" />			<link rel="stylesheet" type="text/css" media="screen" href="custom.css" title="defaut" /><!---->                		<!--[if lte IE 9]>     	<link rel="stylesheet" type="text/css" media="screen" href="http://www.univ-nantes.fr/jsp/styles/defaut/lte_ie9.css" title="defaut" />		<![endif]-->		<!--[if lte IE 8]>     	<link rel="stylesheet" type="text/css" media="screen" href="http://www.univ-nantes.fr/jsp/styles/defaut/lte_ie8.css" title="defaut" />			<script type="text/javascript" src="http://www.univ-nantes.fr/jsp/scripts/DD_roundies_0.0.2a.js"></script>			<script type="text/javascript">		  	// DD_roundies.addRule('#profils', '10px 0 0 0');			</script>		<![endif]-->		<!--[if lte IE 7]>     	<link rel="stylesheet" type="text/css" media="screen" href="http://www.univ-nantes.fr/jsp/styles/defaut/lte_ie7.css" title="defaut" />		<![endif]-->				<script style="text/javascript" ><!--		document.write('<link rel="stylesheet" type="text/css" media="screen" href="http://www.univ-nantes.fr/jsp/styles/defaut/institutionnel/couleur_formation.css" title="defaut" />');//--></script>								        		<link rel="stylesheet" type="text/css" media="print" href="http://www.univ-nantes.fr/jsp/styles/defaut/impression.css" title="defaut" />		<script type="text/javascript">    	//<![CDATA[			if (window!=top){				top.location.href=location.href;			}			//]]>		</script>		<style type="text/css" media="screen">		</style>		<script type="text/javascript"  style="display:none"><!--/* 	ED - 12.07.2006	Fonction AddEvent de John Resig 	http://ejohn.org/projects/flexible-javascript-events/*/ function addEvent( obj, type, fn ) {   if ( obj.attachEvent ) {     obj['e'+type+fn] = fn;     obj[type+fn] = function(){obj['e'+type+fn]( window.event );}     obj.attachEvent( 'on'+type, obj[type+fn] );   } else     obj.addEventListener( type, fn, false ); }  function removeEvent( obj, type, fn ) {  if ( obj.detachEvent ) {    obj.detachEvent( 'on'+type, obj[type+fn] );    obj[type+fn] = null;  } else    obj.removeEventListener( type, fn, false );}var nomForm = "";/* Affichage d'une image type plan d'accï¿½s */function ouvrirFenetrePlan(url, nom) {   window.open(url, nom, "width=520,height=500,scrollbars=yes, status=yes");}function showMessageField(typeAide, f1, f2) {	showMessageField2(typeAide, f1, f2, '');}/* Demande d'affichage d'une fenetre par un champ */function showMessageField2(typeAide, f1, f2, form) {	numToolbox = '';	nomForm = form;	field1 = f1;	field2 = f2;	fieldRequete = '';	texte = '';	nomApplet = '';	// Type d'insertion (liste)	typeInsertion = '';	//AM 200309 : L'arbre des structures doit prendre en compte la langue courante dans le front office	if (typeAide.indexOf('structure') != -1) {	   	var indexSlash1 = typeAide.indexOf('/');		var lg = '';		var filtre = '';		if (indexSlash1 != -1)		{			var indexSlash2 = typeAide.indexOf('/', indexSlash1 + 1);			if (indexSlash2 != -1)			{				lg = typeAide.substring(indexSlash1 + 1, indexSlash2);				filtre = typeAide.substring(indexSlash2 + 1);			}			else			{				lg = typeAide.substring(indexSlash1 + 1);			}		}		sList = window.open('/adminsite/menu/menu.jsp?MODE=STRUCTURE&LANGUE='+lg+'&FILTRE='+filtre, 'menu2', 'scrollbars=yes, resizable=yes, status=yes, width=600, height=400, top=320, left=320');	}	//JSS 20040419 : affichage arbre structure en fonction du perimetre (back-office)	else if (typeAide.indexOf('strbo/') != -1) {		// formatte comme suit strbo/type/objet/action/langue		var indexSlash1 = typeAide.indexOf('/');		var indexSlash2 = typeAide.indexOf('/', indexSlash1 + 1);		var indexSlash3 = typeAide.indexOf('/', indexSlash2 + 1);		var indexSlash4 = typeAide.indexOf('/', indexSlash3 + 1);		var indexSlash5 = typeAide.indexOf('/', indexSlash4 + 1);		var permission = typeAide.substring(indexSlash1+1, indexSlash4);		var lg = typeAide.substring(indexSlash4+1, indexSlash5);		var filtre = typeAide.substring(indexSlash5+1, typeAide.length);		sList = window.open('/adminsite/menu/menu.jsp?MODE=STRUCTURE&PERMISSION='+permission+'&LANGUE='+lg+'&FILTRE='+filtre, 'menu2', 'scrollbars=yes, resizable=yes, status=yes, width=600, height=400, top=320, left=320');	}	//FBI 20051110 : affichage arbre structure en front (filtre sur les structures non visibles)	else if (typeAide.indexOf('strfo') != -1) {	   	var indexSlash1 = typeAide.indexOf('/');		var lg = '';		var filtre = '';		if (indexSlash1 != -1)		{			var indexSlash2 = typeAide.indexOf('/', indexSlash1 + 1);			if (indexSlash2 != -1)			{				lg = typeAide.substring(indexSlash1 + 1, indexSlash2);				filtre = typeAide.substring(indexSlash2 + 1);			}			else			{				lg = typeAide.substring(indexSlash1 + 1);			}		}		sList = window.open('/adminsite/menu/menu.jsp?MODE=STRUCTURE&LANGUE='+lg+'&FILTRE='+filtre+'&FRONT=true', 'menu2', 'scrollbars=yes, resizable=yes, status=yes, width=600, height=400, top=320, left=320');	}	else if (typeAide == 'rubrique' || typeAide.indexOf('rubrique') != -1) {		if (typeAide == 'rubrique') {			 sList = window.open('/adminsite/menu/menu.jsp?MODE=RUBRIQUE', 'menu2', 'scrollbars=yes, resizable=yes, status=yes, width=600, height=400, top=320, left=320');		}		else {			 var lg = typeAide.substring(typeAide.indexOf('rubrique')+8,typeAide.length);			 if (lg != null && lg.length > 0)				 sList = window.open('/adminsite/menu/menu.jsp?MODE=RUBRIQUE&LANGUE='+lg, 'menu2', 'scrollbars=yes, resizable=yes, status=yes, width=600, height=400, top=320, left=320');			 else				 sList = window.open('/adminsite/menu/menu.jsp?MODE=RUBRIQUE', 'menu2', 'scrollbars=yes, resizable=yes, status=yes, width=600, height=400, top=320, left=320');		 }	}	//JSS 20040419 : affichage arbre rubrique en fonction du perimetre (back-office)	else if (typeAide.indexOf('rubbo/') != -1)	{		// formatte comme suit rubbo/type/objet/action		var indexSlash1 = typeAide.indexOf('/');		var indexSlash2 = typeAide.indexOf('/', indexSlash1 + 1);		var indexSlash3 = typeAide.indexOf('/', indexSlash2 + 1);		var permission = typeAide.substring(indexSlash1+1,typeAide.length);		sList = window.open('/adminsite/menu/menu.jsp?MODE=RUBRIQUE&PERMISSION='+permission, 'menu2', 'scrollbars=yes, resizable=yes, status=yes, width=600, height=400, top=320, left=320');	}/* FBI : utiliser 'saisie_annuaire'	else if (typeAide == 'annuaire') {		sList = window.open("/servlet/com.jsbsoft.jtf.core.SG?PROC=SAISIE_ANNUAIRE&ACTION=RECHERCHER&TOOLBOX=LIEN_INTERNE&LANGUE_ARTICLE=-1", "annuaire2", "width=500,height=400,top=210,left=310,scrollbars=yes,resizable=yes, status=yes");	}*/	else if (typeAide.indexOf('fichefil') != -1) {		var proc = typeAide.substring(typeAide.indexOf('fichefil')+8,typeAide.length).toUpperCase();		sList = window.open("/servlet/com.jsbsoft.jtf.core.SG?PROC="+proc+"&ACTION=RECHERCHER&TOOLBOX=LIEN_INTERNE", "fichefil", "width=500,height=500,top=210,left=310,scrollbars=yes, status=yes");	}	else if (typeAide == 'pagelibre') {		sList = window.open("/servlet/com.jsbsoft.jtf.core.SG?PROC=SAISIE_PAGELIBRE&ACTION=RECHERCHER&TOOLBOX=LIEN_INTERNE&LANGUE_ARTICLE=0", "pagelibre", "width=500,height=330,top=210,left=310,scrollbars=yes, status=yes");	}	/* AM 200309 creation de page libre */	else if (typeAide == ('pagelibre_creation')){		 field2="LIBELLE_CODE_PAGE_TETE";		 sList = window.open("/servlet/com.jsbsoft.jtf.core.SG?PROC=TRAITEMENT_PAGELIBRE&ACTION=AJOUTER&LANGUE=0&CODE_RUBRIQUE="+f2, "pagelibre_creation", "width=500,height=330,top=210,left=310,scrollbars=yes, status=yes");	}	// JSS 20040419 : arbre des groupes	else if (typeAide == 'groupe_dsi') {		sList = window.open('/adminsite/menu/menu.jsp?MODE=GROUPE', 'menu2', 'scrollbars=yes, resizable=yes, status=yes, width=600, height=400, top=320, left=320,resizable=yes,status=yes');	}	//JSS 20040419 : affichage arbre groupe en fonction du perimetre (back-office)	else if (typeAide.indexOf('groupebo/') != -1)	{		// formatte comme suit groupebo/type/objet/action		var indexSlash1 = typeAide.indexOf('/');		var indexSlash2 = typeAide.indexOf('/', indexSlash1 + 1);		var indexSlash3 = typeAide.indexOf('/', indexSlash2 + 1);		var permission = typeAide.substring(indexSlash1+1,typeAide.length);		sList = window.open('/adminsite/menu/menu.jsp?MODE=GROUPE&PERMISSION='+permission, 'menu2', 'scrollbars=yes,,resizable=yes,width=350,height=210,top=320,left=320, resizable=yes,status=yes');	}	else if (typeAide == 'public_vise_dsi') {		sList = window.open('/adminsite/menu/menu.jsp?MODE=GROUPE&PUBLIC_VISE=1', 'menu2', 'scrollbars=yes,width=420,height=210,top=320,left=320, resizable=yes,status=yes');	}	// JSS 20040419 : arbre des groupes	else if (typeAide.indexOf('publicbo/') != -1)	{		// formatte comme suit publicbo/type/objet/action		var indexSlash1 = typeAide.indexOf('/');		var indexSlash2 = typeAide.indexOf('/', indexSlash1 + 1);		var indexSlash3 = typeAide.indexOf('/', indexSlash2 + 1);		var permission = typeAide.substring(indexSlash1+1,typeAide.length);		sList = window.open('/adminsite/menu/menu.jsp?MODE=GROUPE&PUBLIC_VISE=1&PERMISSION='+permission, 'menu2', 'scrollbars=yes,width=420,height=210,top=320,left=320, resizable=yes,status=yes');	}	else if (typeAide == 'utilisateur') {		sList = window.open("/servlet/com.jsbsoft.jtf.core.SG?PROC=RECHERCHE_UTILISATEUR&ACTION=RECHERCHER", "annuaire2", "width=450,height=500,top=210,left=290,scrollbars=yes,resizable=yes,status=yes");	}/* FBI : utiliser 'saisie_formation'	else if (typeAide == 'formation') {		sList = window.open("/servlet/com.jsbsoft.jtf.core.SG?PROC=SAISIE_FORMATION&ACTION=RECHERCHER&TOOLBOX=LIEN_INTERNE&LANGUE_ARTICLE=-1", "formation", "width=500,height=330,top=150,left=150,scrollbars=yes, status=yes");	}/* FBI : utiliser 'saisie_ueup'	else if (typeAide == 'ueup') {		sList = window.open("/servlet/com.jsbsoft.jtf.core.SG?PROC=SAISIE_UEUP&ACTION=RECHERCHER&TOOLBOX=LIEN_INTERNE&LANGUE_ARTICLE=-1", "ueup", "width=500,height=330,top=150,left=150,scrollbars=yes, status=yes");	}*/	else if (typeAide == 'parcours') {		sList = window.open("/servlet/com.jsbsoft.jtf.core.SG?PROC=SAISIE_UEUP&ACTION=RECHERCHER&TOOLBOX=LIEN_INTERNE&TYPE=PARCOURS&LANGUE_ARTICLE=-1", "parcours", "width=500,height=330,top=150,left=150,scrollbars=yes, status=yes");	}	else if (typeAide.indexOf('parcoursM') != -1) {		var codeUe = typeAide.substring(9);		sList = window.open("/servlet/com.jsbsoft.jtf.core.SG?PROC=TRAITEMENT_PARCOURS&ACTION=MODIFIER&CODE_UEUP_PARCOURS="+codeUe+"&TOOLBOX=LIEN_INTERNE&LANGUE_ARTICLE=-1", "parcours", "width=500,height=330,top=150,left=150,scrollbars=yes, status=yes");	}/* FBI : utiliser 'saisie_cours'	else if (typeAide == 'cours') {		sList = window.open("/servlet/com.jsbsoft.jtf.core.SG?PROC=SAISIE_COURS&ACTION=RECHERCHER&TOOLBOX=LIEN_INTERNE&LANGUE_ARTICLE=-1", "ueup", "width=500,height=330,top=150,left=150,scrollbars=yes, status=yes");	}*/	else if (typeAide == 'photo') {		indice='';		if (f1=='' && f2=='')		{			indice = window.document.forms[indiceForm].NB_FICHIER_JOINT.value;			eval('window.document.forms[indiceForm].NO_FICHIER_JOINT.value = '+indice+'');		}		sList = window.open("/servlet/com.jsbsoft.jtf.core.SG?PROC=SAISIE_PHOTO&ACTION=RECHERCHER&MODE_PHOTOTHEQUE=SELECTION&NO_FICHIER_JOINT="+indice, "photo", "width=650,height=535,top=20,left=100,scrollbars=yes, status=yes");	}	else if (typeAide == 'image') {       sList = window.open("/servlet/com.jsbsoft.jtf.core.SG?PROC=SAISIE_PHOTO&ACTION=RECHERCHER&MODE_PHOTOTHEQUE=SAISIE", "photo", "width=650,height=535,top=20,left=100,scrollbars=yes, status=yes");	}	else if (typeAide == 'document') {		sList = window.open("/servlet/com.jsbsoft.jtf.core.SG?PROC=TRAITEMENT_DOCUMENT&ACTION=INSERER", "document", "width=400, height=200, top=20, left=100, scrollbars=yes, status=yes, status=yes");	}	else if (typeAide == 'documentfront') {		sList = window.open("/servlet/com.jsbsoft.jtf.core.SG?PROC=TRAITEMENT_DOCUMENT_FRONT&ACTION=INSERER&SAISIE_FRONT=true", "document", "width=400, height=130, top=20, left=100, scrollbars=yes, status=yes");	}/* FBI : 20060109 : @deprecated	else if (typeAide == 'evenements')		sList = window.open("/servlet/com.jsbsoft.jtf.core.SG?PROC=SAISIE_EVENEMENTS&ACTION=RECHERCHER&TOOLBOX=LIEN_INTERNE&LANGUE_ARTICLE=-1", "evenements", "width=350,height=300,top=150,left=150,scrollbars=yes, status=yes");*//* FBI : utiliser 'saisie_actualite'	else if (typeAide == 'actualites') {		sList = window.open("/servlet/com.jsbsoft.jtf.core.SG?PROC=SAISIE_ACTUALITE&ACTION=RECHERCHER&TOOLBOX=LIEN_INTERNE&LANGUE_ARTICLE=-1", "actualites", "width=400,height=380,top=150,left=150,scrollbars=yes, status=yes");	}/* FBI : 20060109 : @deprecated	else if (typeAide == 'sites')		sList = window.open("/servlet/com.jsbsoft.jtf.core.SG?PROC=SAISIE_SITESLIEUX&ACTION=RECHERCHER&TOOLBOX=LIEN_INTERNE&LANGUE_ARTICLE=-1", "sites", "width=350,height=300,top=150,left=150,scrollbars=yes, status=yes");*/	else if (typeAide == 'pagetete') {		sList = window.open("/adminsite/toolbox/choix_objet.jsp?TOOLBOX=PAGE_TETE", "list", "width=500,height=330,top=100,left=100,scrollbars=yes,status=yes");		pageTete = true;	}	else if (typeAide == 'commentaire') {    		sList = window.open("/adminsite/toolbox/choix_objet.jsp?TOOLBOX=COMMENTAIRE", "list", "width=500,height=330,top=100,left=100,scrollbars=yes,status=yes");		pageTete = true;	}	else if (typeAide == 'requete') {		field1 = "";		field2 = f2;		nomForm = "";		fieldRequete = f1;		if (field2 == 'STATS') {			field2 = "";			sList = window.open("/adminsite/toolbox/choix_objet.jsp?TOOLBOX=LIEN_REQUETE&RESTRICTION=STATS", "list", "width=500,height=330,top=100,left=100,scrollbars=yes,status=yes");		}		else {			field2 = "";			sList = window.open("/adminsite/toolbox/choix_objet.jsp?TOOLBOX=LIEN_REQUETE&RESTRICTION=XML", "list", "width=500,height=330,top=100,left=100,scrollbars=yes,status=yes");		}	}}/* Traitement des donnees resultats renvoyees par la fenetre mere */function saveField(objet, code, libelle) {	/* Cas de l'administration */	if (inBackOffice())	{		if (!pageTete) {				/* Cas de l'administration */				if (field1 != "")					eval( "window.document.forms[0]."+field1+".value = code;");				if (field2 != "")					eval( "window.document.forms[0]."+field2+".value = libelle;");								//AM 200501: parcours LMD				if(ajoutAuto != ""){					eval("ajouter"+ajoutAuto+"();");					ajoutAuto = "";				}				//AM 200501: parcours LMD				if(modifAuto != ""){					eval("validmodif"+modifAuto+"();");					modifAuto = "";				}							}else{				/* Cas d'une page de tete : on ajoute le type d'objet au code*/				if (field1 != "")					eval( "window.document.forms[0]."+field1+".value = code+',TYPE='+objet;");				if (field2 != "")					eval( "window.document.forms[0]."+field2+".value = objet + ' : ' +libelle;");			}	} else	{		/* Cas particulier du WEB */			var formCourant = "RECHERCHE_WEB";			if( nomForm.length > 0)				formCourant = nomForm;		if (field1 != "")			eval( "window.document."+formCourant+"."+field1+".value = code;");		if (field2 != "")			eval( "window.document."+formCourant+"."+field2+".value = libelle;");	}		if( fieldRequete != "") {		chaine = "\"OBJET="+objet;		if( code.length > 0)		{			chaine = chaine +"&"+code;		}		chaine = chaine +"\"";		eval( "window.document.forms[0]."+fieldRequete+".value = "+ chaine );	}  field1 = "";  field2 = "";  nomForm = "";  fieldRequete = "";  numToolbox = "";  texte = "";  nomApplet = "";    // JSS 20020612-001 Type d'insertion (liste)  typeInsertion="";		}function inBackOffice () {	for (i = 0; i < window.document.forms.length; i++)	{		if ( (window.document.forms[i].name == 'RECHERCHE_WEB' || window.document.forms[i].name == nomForm )			&& window.document.forms[i].name != "")			return false;	}	return true;}/* Affichage d'un calendrier pour les formulaires avec recherche par date */function affiche_calendrier(nom, form) {	if (document.getElementById) {		document.write("<a href=\"#\" onclick=\"window.open('/adminsite/calendrier/calendrierjs.html?champ=" + nom + "&form=" + form +"', 'calendrier', 'width=135, height=138, toolbar=no, location=no, status=yes, resizable=yes'); return false;\"><img src=\"/images/calendrier.png\" alt=\"calendrier\" title=\"choisir une date\"></a>");	}}/* Effacement du libelle d'un champ de recherche */function effacerTextField (zoneSaisie, zoneLibelle, value, libelle)	{	if (inBackOffice() )	{		/* Cas de l'administration */		eval( "window.document.forms[0]."+zoneSaisie+".value = value;");		eval( "window.document.forms[0]."+zoneLibelle+".value = libelle;");	} else	{		eval( "window.document.RECHERCHE_WEB."+zoneSaisie+".value = value;");		eval( "window.document.RECHERCHE_WEB."+zoneLibelle+".value = libelle;");	}}/* Activation du service selectionnï¿½ dans la liste des services */function activerService() {	var index = window.document.getElementById('selectservices').selectedIndex;	if( index == 0)		return;	var url = window.document.getElementById('selectservices').options[index].value;	/* Analyse target */	var indexTarget = url.indexOf(';');	if (indexTarget > 0) {		var target =  url.substring(0,indexTarget);		url = url.substring(indexTarget + 1);		window.open(url, target);	} else {		window.location.href=url.substring(1);	}}/* Affichage d'une image dans une popup */function afficheImage(source) {	// Ouverture du pop-up	window.open(source,'pop','status=no,directories=no,toolbar=no,location=no,menubar=no,scrollbars=yes,resizable=yes');}function atteindreAncre(ancre) {	if (ancre != 'null'){		window.location.href += '#' + ancre;	}}/* Fonction utilisï¿½e dans la recherche avancï¿½e pour rï¿½initialiser les formulaires */function viderFormulaire(criteres) {	criteres = criteres.split(";");	var champReinit = "";	var valeurChamp = "";		for (var i=0; i < (criteres.length); i++) {		champReinit = eval("document.RECHERCHE_WEB." + criteres[i].substring(0, criteres[i].indexOf("=")));		valeurChamp = criteres[i].substring(criteres[i].indexOf("=")+1);				champReinit.value = valeurChamp	}}function afficherBoutonImprimer(intitule) {	document.write('<span id="imprimer" onclick="window.print(); return false;">' + intitule + '</span>');}/* fonction permettant d'afficher ou de cacher un element par id (specific ï¿½ la fiche formation) */function montrerCacher_div(intitule) {	var oDiv = document.getElementById(intitule);	var oSpan =  document.getElementById(intitule + '_s');	var blksem = intitule.substr(0,6);		if (oDiv != null){		if (oDiv.style.display == 'none'){			oDiv.style.display = 'block';			if (oSpan != null){								if (blksem == 'blksem'){					oSpan.className = 'titre_ouvert_vert';				} else {					oSpan.className = 'titre_ouvert';				}				oSpan.title='Masquer les infos';			}		} else if (oDiv.style.display == 'block'){			oDiv.style.display = 'none';			if (oSpan != null){				if (blksem == 'blksem'){					oSpan.className = 'titre_cache_vert';				} else {					oSpan.className = 'titre_cache';				}				oSpan.title='Afficher les infos';			}		}			}}/* * Cache tous les divs ayant le mï¿½me prï¿½fixe */ function closeOpenAll() {	 var ouverture = true;	 var verifEtat = document.getElementById('tout_derouler');	 if (verifEtat !=null ){		 if (verifEtat.className == 'tout_derouler'){			 ouverture = true;		 } else {			 ouverture = false;		 } 		 var contenu_deco = document.getElementById('page');		   	 // on prend tous les fils 	   	 var filsContenu_deco = contenu_deco.getElementsByTagName("*");	   	 if (ouverture == true){			 for(var i=0; i<filsContenu_deco.length; i++){				if (filsContenu_deco[i].className == 'cache' || filsContenu_deco[i].className == 'ouvert' ){					filsContenu_deco[i].style.display = 'block';					filsContenu_deco[i].className = 'ouvert';														} 				if (filsContenu_deco[i].className == 'titre_cache'){					filsContenu_deco[i].className = 'titre_ouvert'					filsContenu_deco[i].title = 'Masquer les infos';				}				verifEtat.className = 'tout_fermer';				verifEtat.innerHTML = 'Masquer toutes les infos';				verifEtat.title = 'Masquer toutes les infos';			 }	   	 } else {	   		 for(var i=0; i<filsContenu_deco.length; i++){				 if (filsContenu_deco[i].className == 'cache' || filsContenu_deco[i].className == 'ouvert' ){					filsContenu_deco[i].style.display = 'none';					filsContenu_deco[i].className = 'cache';				}				 if (filsContenu_deco[i].className == 'titre_ouvert'){						filsContenu_deco[i].className = 'titre_cache';						filsContenu_deco[i].title = 'Afficher les infos';				}				 verifEtat.className = 'tout_derouler';				 verifEtat.innerHTML = 'Afficher toutes les infos';				 verifEtat.title = 'Afficher toutes les infos';			 }	   	 }	 }  }  /* fonction permettant d'affiche une combo specific ï¿½ la rechercher fiche formation */ function affiner_recherche() {	 var oAffinerRech2 = document.getElementById('affiner_recherche_2');	 var oAffinerRech3 = document.getElementById('affiner_recherche_3');	  	if (oAffinerRech2 != null && oAffinerRech2.style.display == 'none'){ 		oAffinerRech2.style.display = 'block'; 	} else if (oAffinerRech3 != null && oAffinerRech3.style.display == 'none'){ 		oAffinerRech3.style.display = 'block';	} else {		alert('3 débouchés naturels maximum')	} 		} /* fonction permettant de selectionner le type d'objet qui doivent ï¿½tre recherchï¿½s avec le formulaire de recherche */	 function rechercherTypeObjet(objet) {		 var oRechercherType = document.getElementById('RECHERCHER_TYPE_OBJET');		 var oLabelAnnuaire = document.getElementById('lab_recherche_annuaire');		 var oLabelSite = document.getElementById('lab_recherche_site');		 if (oRechercherType != null) {			 if (objet == 'ANNUAIREKSUP') {				 oRechercherType.value = objet;				 oLabelAnnuaire.className  = 'encours';				 oLabelSite.className  = '';			 } else {				 oRechercherType.value = 'TOUS';				 oLabelAnnuaire.className  = '';				 oLabelSite.className  = 'encours';			 }		 }}	  /* Activation du service selectionnï¿½ dans la liste des services */ function rechercherAutreObjet() { 	var index = window.document.getElementById('selecttyperecherche').selectedIndex; 	var url = window.document.getElementById('selecttyperecherche').options[index].value; 		window.location.href=url; } /* Affiche le type de choix de recherche (tout le site / annuaire) du service selectionnï¿½ dans la liste des services */ function afficherChoixTypeRecherche() {	 var oRechercherType = document.getElementById('RECHERCHER_TYPE_OBJET');	 if (oRechercherType != null) {		 rechercherTypeObjet(oRechercherType.value);	 }	 var zoneBouton = window.document.getElementById('type_recherche');	 if (zoneBouton != null) {		 zoneBouton.style.visibility = 'visible';	 } }//--></script>		<script type="text/javascript"  style="display:none"><!--/*	ED - 12.07.2006		Script pour gerer les menus deroulants structures comme des listes <ul> imbriquees.	Les listes <ul> parentes (ou le menu de plus haut niveau) doient avoir une classe dont	la valeur est definie ici par la variable : classeMenuDeroulant		initMenus() parcour le document a la recherche des listes <ul> possedant cette classe	et attache des gestionnaires d evenements aux <li> qui contiennent des sous menus	pour les faire apparaitre et disparaitre au survol		Attention: la fonction addEvent() definie dans defaut.js est requise !*/var classeMenuDeroulant = /menu_deroulant/;/*	Attache les gestionnaires d evenements aux lis qui ont des sous menus*/function initMenus() {	var menu, menus, lis, liSousMenus;	if(document.getElementById && document.getElementsByTagName){			menus = document.getElementsByTagName("ul");			if(menus.length > 0 ){				for(var j=0; j<menus.length; j++){					if(menus[j].className.match(classeMenuDeroulant)){						menu = menus[j];						lis = menu.getElementsByTagName("li");						for(var i=0; i<lis.length; i++){							liSousMenus = lis[i].getElementsByTagName("ul");							if(liSousMenus.length > 0){								// a un sous-menu								addEvent(lis[i],"mouseover", montrePremierSousMenu);								addEvent(lis[i],"focus", montrePremierSousMenu);								addEvent(lis[i],"mouseout", cachePremierSousMenu);									addEvent(lis[i],"blur", cachePremierSousMenu);								}						}					} 				}			}	}}/*	Montre et cache les sous menus*/function montrePremierSousMenu(){	this.getElementsByTagName("ul")[0].style.display = "block";	/*this.style.backgroundColor = "#EDF4F9";*/}function cachePremierSousMenu(){	this.getElementsByTagName("ul")[0].style.display = "none";	/*this.style.backgroundColor = "#fff";*/}/*	Appelle initMenus() au chargement de la page*/addEvent(window,"load", initMenus);//--></script>		<script type="text/javascript"  style="display:none"><!--/** * SWFObject v1.5: Flash Player detection and embed - http://blog.deconcept.com/swfobject/ * * SWFObject is (c) 2007 Geoff Stearns and is released under the MIT License: * http://www.opensource.org/licenses/mit-license.php * */if(typeof deconcept=="undefined"){var deconcept=new Object();}if(typeof deconcept.util=="undefined"){deconcept.util=new Object();}if(typeof deconcept.SWFObjectUtil=="undefined"){deconcept.SWFObjectUtil=new Object();}deconcept.SWFObject=function(_1,id,w,h,_5,c,_7,_8,_9,_a){if(!document.getElementById){return;}this.DETECT_KEY=_a?_a:"detectflash";this.skipDetect=deconcept.util.getRequestParameter(this.DETECT_KEY);this.params=new Object();this.variables=new Object();this.attributes=new Array();if(_1){this.setAttribute("swf",_1);}if(id){this.setAttribute("id",id);}if(w){this.setAttribute("width",w);}if(h){this.setAttribute("height",h);}if(_5){this.setAttribute("version",new deconcept.PlayerVersion(_5.toString().split(".")));}this.installedVer=deconcept.SWFObjectUtil.getPlayerVersion();if(!window.opera&&document.all&&this.installedVer.major>7){deconcept.SWFObject.doPrepUnload=true;}if(c){this.addParam("bgcolor",c);}var q=_7?_7:"high";this.addParam("quality",q);this.setAttribute("useExpressInstall",false);this.setAttribute("doExpressInstall",false);var _c=(_8)?_8:window.location;this.setAttribute("xiRedirectUrl",_c);this.setAttribute("redirectUrl","");if(_9){this.setAttribute("redirectUrl",_9);}};deconcept.SWFObject.prototype={useExpressInstall:function(_d){this.xiSWFPath=!_d?"expressinstall.swf":_d;this.setAttribute("useExpressInstall",true);},setAttribute:function(_e,_f){this.attributes[_e]=_f;},getAttribute:function(_10){return this.attributes[_10];},addParam:function(_11,_12){this.params[_11]=_12;},getParams:function(){return this.params;},addVariable:function(_13,_14){this.variables[_13]=_14;},getVariable:function(_15){return this.variables[_15];},getVariables:function(){return this.variables;},getVariablePairs:function(){var _16=new Array();var key;var _18=this.getVariables();for(key in _18){_16[_16.length]=key+"="+_18[key];}return _16;},getSWFHTML:function(){var _19="";if(navigator.plugins&&navigator.mimeTypes&&navigator.mimeTypes.length){if(this.getAttribute("doExpressInstall")){this.addVariable("MMplayerType","PlugIn");this.setAttribute("swf",this.xiSWFPath);}_19="<embed type=\"application/x-shockwave-flash\" src=\""+this.getAttribute("swf")+"\" width=\""+this.getAttribute("width")+"\" height=\""+this.getAttribute("height")+"\" style=\""+this.getAttribute("style")+"\"";_19+=" id=\""+this.getAttribute("id")+"\" name=\""+this.getAttribute("id")+"\" ";var _1a=this.getParams();for(var key in _1a){_19+=[key]+"=\""+_1a[key]+"\" ";}var _1c=this.getVariablePairs().join("&");if(_1c.length>0){_19+="flashvars=\""+_1c+"\"";}_19+="/>";}else{if(this.getAttribute("doExpressInstall")){this.addVariable("MMplayerType","ActiveX");this.setAttribute("swf",this.xiSWFPath);}_19="<object id=\""+this.getAttribute("id")+"\" classid=\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\" width=\""+this.getAttribute("width")+"\" height=\""+this.getAttribute("height")+"\" style=\""+this.getAttribute("style")+"\">";_19+="<param name=\"movie\" value=\""+this.getAttribute("swf")+"\" />";var _1d=this.getParams();for(var key in _1d){_19+="<param name=\""+key+"\" value=\""+_1d[key]+"\" />";}var _1f=this.getVariablePairs().join("&");if(_1f.length>0){_19+="<param name=\"flashvars\" value=\""+_1f+"\" />";}_19+="</object>";}return _19;},write:function(_20){if(this.getAttribute("useExpressInstall")){var _21=new deconcept.PlayerVersion([6,0,65]);if(this.installedVer.versionIsValid(_21)&&!this.installedVer.versionIsValid(this.getAttribute("version"))){this.setAttribute("doExpressInstall",true);this.addVariable("MMredirectURL",escape(this.getAttribute("xiRedirectUrl")));document.title=document.title.slice(0,47)+" - Flash Player Installation";this.addVariable("MMdoctitle",document.title);}}if(this.skipDetect||this.getAttribute("doExpressInstall")||this.installedVer.versionIsValid(this.getAttribute("version"))){var n=(typeof _20=="string")?document.getElementById(_20):_20;n.innerHTML=this.getSWFHTML();return true;}else{if(this.getAttribute("redirectUrl")!=""){document.location.replace(this.getAttribute("redirectUrl"));}}return false;}};deconcept.SWFObjectUtil.getPlayerVersion=function(){var _23=new deconcept.PlayerVersion([0,0,0]);if(navigator.plugins&&navigator.mimeTypes.length){var x=navigator.plugins["Shockwave Flash"];if(x&&x.description){_23=new deconcept.PlayerVersion(x.description.replace(/([a-zA-Z]|\s)+/,"").replace(/(\s+r|\s+b[0-9]+)/,".").split("."));}}else{if(navigator.userAgent&&navigator.userAgent.indexOf("Windows CE")>=0){var axo=1;var _26=3;while(axo){try{_26++;axo=new ActiveXObject("ShockwaveFlash.ShockwaveFlash."+_26);_23=new deconcept.PlayerVersion([_26,0,0]);}catch(e){axo=null;}}}else{try{var axo=new ActiveXObject("ShockwaveFlash.ShockwaveFlash.7");}catch(e){try{var axo=new ActiveXObject("ShockwaveFlash.ShockwaveFlash.6");_23=new deconcept.PlayerVersion([6,0,21]);axo.AllowScriptAccess="always";}catch(e){if(_23.major==6){return _23;}}try{axo=new ActiveXObject("ShockwaveFlash.ShockwaveFlash");}catch(e){}}if(axo!=null){_23=new deconcept.PlayerVersion(axo.GetVariable("$version").split(" ")[1].split(","));}}}return _23;};deconcept.PlayerVersion=function(_29){this.major=_29[0]!=null?parseInt(_29[0]):0;this.minor=_29[1]!=null?parseInt(_29[1]):0;this.rev=_29[2]!=null?parseInt(_29[2]):0;};deconcept.PlayerVersion.prototype.versionIsValid=function(fv){if(this.major<fv.major){return false;}if(this.major>fv.major){return true;}if(this.minor<fv.minor){return false;}if(this.minor>fv.minor){return true;}if(this.rev<fv.rev){return false;}return true;};deconcept.util={getRequestParameter:function(_2b){var q=document.location.search||document.location.hash;if(_2b==null){return q;}if(q){var _2d=q.substring(1).split("&");for(var i=0;i<_2d.length;i++){if(_2d[i].substring(0,_2d[i].indexOf("="))==_2b){return _2d[i].substring((_2d[i].indexOf("=")+1));}}}return "";}};deconcept.SWFObjectUtil.cleanupSWFs=function(){var _2f=document.getElementsByTagName("OBJECT");for(var i=_2f.length-1;i>=0;i--){_2f[i].style.display="none";for(var x in _2f[i]){if(typeof _2f[i][x]=="function"){_2f[i][x]=function(){};}}}};if(deconcept.SWFObject.doPrepUnload){if(!deconcept.unloadSet){deconcept.SWFObjectUtil.prepUnload=function(){__flash_unloadHandler=function(){};__flash_savedUnloadHandler=function(){};window.attachEvent("onunload",deconcept.SWFObjectUtil.cleanupSWFs);};window.attachEvent("onbeforeunload",deconcept.SWFObjectUtil.prepUnload);deconcept.unloadSet=true;}}if(!document.getElementById&&document.all){document.getElementById=function(id){return document.all[id];};}var getQueryParamValue=deconcept.util.getRequestParameter;var FlashObject=deconcept.SWFObject;var SWFObject=deconcept.SWFObject;//--></script>		<script type="text/javascript"  style="display:none"><!--var field1 = "";var field2 = "";var fieldRequete = "";var texte = "";var nomApplet = "";var nomForm = "";var pageTete = false;//AM200501 : parcours LMDvar ajoutAuto="", modifAuto="";// JSS 20020612-001 Type d'insertion (liste)var typeInsertion="";/* ouverture d'une fenêtre centrée */function ouvrirPhoto(urlPhoto,largeur,hauteur) {  x = (screen.availWidth - largeur)/2;  y = (screen.availHeight - 30 - hauteur)/2;  attrs = "height="+ hauteur +", width="+ largeur +", left="+ x +", top="+ y;  if (y<0)  {	 attrs += ",scrollbars=yes"  }  fenetre = window.open(urlPhoto,'photo',attrs);}/* Demande d'affichage d'une fenetre au niveau du front office */function ouvrirFenetrePlan(url, nom) {   window.open(url, nom, "width=520,height=500,scrollbars=yes, status=yes, resizable=1");}/* Affichage de la phototheque */function showPhototheque( ) {        //EL 20051221 rajout resizable=yes   window.open("/servlet/com.jsbsoft.jtf.core.SG?PROC=SAISIE_PHOTO&ACTION=RECHERCHER&MODE_PHOTOTHEQUE=ADMINISTRATION", "photo", "width=650,height=535,top=20,left=100,scrollbars=yes, status=yes,resizable=yes");}function showMessageField(typeAide, f1, f2) {	showMessageField2(typeAide, f1, f2, '');}/* Demande d'affichage d'une fenetre par un champ */function showMessageField2(typeAide, f1, f2, form) {	nomForm = form;	field1 = f1;	field2 = f2;	fieldRequete = '';	texte = '';	nomApplet = '';	// Type d'insertion (liste)	typeInsertion = '';	var oForm;	if (inBackOffice())	{		oForm = document.forms[0];	}	else {		if (form.length > 0) {			oForm = document.forms[form];		}		else {			oForm = document.forms['RECHERCHE_WEB'];		}	}	var value = oForm.elements[f1].value;	if (!value)           value="";	//AM 200309 : L'arbre des structures doit prendre en compte la langue courante dans le front office	if (typeAide.indexOf('structure') != -1) {	   	var indexSlash1 = typeAide.indexOf('/');		var lg = '';		var filtre = '';		if (indexSlash1 != -1)		{			var indexSlash2 = typeAide.indexOf('/', indexSlash1 + 1);			if (indexSlash2 != -1)			{				lg = typeAide.substring(indexSlash1 + 1, indexSlash2);				filtre = typeAide.substring(indexSlash2 + 1);			}			else			{				lg = typeAide.substring(indexSlash1 + 1);			}		}		sList = window.open('/adminsite/menu/menu.jsp?MODE=STRUCTURE&CODE='+value+'&LANGUE='+lg+'&FILTRE='+filtre, 'menu2', 'scrollbars=yes, resizable=yes, status=yes, width=600, height=400, top=320, left=320');	}	//JSS 20040419 : affichage arbre structure en fonction du perimetre (back-office)	else if (typeAide.indexOf('strbo/') != -1) {		// formatte comme suit strbo/type/objet/action/langue		var indexSlash1 = typeAide.indexOf('/');		var indexSlash2 = typeAide.indexOf('/', indexSlash1 + 1);		var indexSlash3 = typeAide.indexOf('/', indexSlash2 + 1);		var indexSlash4 = typeAide.indexOf('/', indexSlash3 + 1);		var indexSlash5 = typeAide.indexOf('/', indexSlash4 + 1);		var permission = typeAide.substring(indexSlash1+1, indexSlash4);		var lg = typeAide.substring(indexSlash4+1, indexSlash5);		var filtre = typeAide.substring(indexSlash5+1, typeAide.length);		sList = window.open('/adminsite/menu/menu.jsp?MODE=STRUCTURE&CODE='+value+'&PERMISSION='+permission+'&LANGUE='+lg+'&FILTRE='+filtre, 'menu2', 'scrollbars=yes, resizable=yes, status=yes, width=600, height=400, top=320, left=320');	}	//FBI 20051110 : affichage arbre structure en front (filtre sur les structures non visibles)	else if (typeAide.indexOf('strfo') != -1) {	   	var indexSlash1 = typeAide.indexOf('/');		var lg = '';		var filtre = '';		if (indexSlash1 != -1)		{			var indexSlash2 = typeAide.indexOf('/', indexSlash1 + 1);			if (indexSlash2 != -1)			{				lg = typeAide.substring(indexSlash1 + 1, indexSlash2);				filtre = typeAide.substring(indexSlash2 + 1);			}			else			{				lg = typeAide.substring(indexSlash1 + 1);			}		}		sList = window.open('/adminsite/menu/menu.jsp?MODE=STRUCTURE&CODE='+value+'&LANGUE='+lg+'&FILTRE='+filtre+'&FRONT=true', 'menu2', 'scrollbars=yes, resizable=yes, status=yes, width=600, height=400, top=320, left=320');	}	else if (typeAide == 'rubrique' || typeAide.indexOf('rubrique') != -1) {		var lg = '';		var racine = '';		if (typeAide != 'rubrique') {			var indexSlash = typeAide.indexOf('/');			if (indexSlash != -1) { //typeAide du type rubrique/racine ou rubriquelangue/racine				racine = typeAide.substring(indexSlash + 1, typeAide.length);				lg = typeAide.substring(typeAide.indexOf('rubrique')+8, indexSlash);			}			else { //typeAide du type rubriquelangue				lg = typeAide.substring(typeAide.indexOf('rubrique')+8, typeAide.length);			}		}		sList = window.open('/adminsite/menu/menu.jsp?MODE=RUBRIQUE&CODE='+value+'&LANGUE='+lg+'&RACINE='+racine, 'menu2', 'scrollbars=yes, resizable=yes, status=yes, width=600, height=400, top=320, left=320');	}	//JSS 20040419 : affichage arbre rubrique en fonction du perimetre (back-office)	else if (typeAide.indexOf('rubbo/') != -1)	{		// formatte comme suit rubbo/type/objet/action		var indexSlash1 = typeAide.indexOf('/');		var indexSlash2 = typeAide.indexOf('/', indexSlash1 + 1);		var indexSlash3 = typeAide.indexOf('/', indexSlash2 + 1);		var indexSlash4 = typeAide.indexOf('/', indexSlash3 + 1);		var permission = '';		var racine = '';		if( indexSlash3 != -1 ){ //typeAide du type rubbo/FICHE/OO15/C/racine			permission = typeAide.substring(indexSlash1+1,indexSlash4);			racine = typeAide.substring(indexSlash4+1,typeAide.length);		}		else if( indexSlash2 != -1) { //typeAide du type rubbo//racine			permission = typeAide.substring(indexSlash1+1,indexSlash2);			racine = typeAide.substring(indexSlash2+1,typeAide.length);		}		else {			permission = typeAide.substring(indexSlash1+1,typeAide.length);		}		sList = window.open('/adminsite/menu/menu.jsp?MODE=RUBRIQUE&CODE='+value+'&PERMISSION='+permission+'&RACINE='+racine, 'menu2', 'scrollbars=yes, resizable=yes, status=yes, width=600, height=400, top=320, left=320');	}	// JSS 20040419 : arbre des groupes	else if (typeAide == 'groupe_dsi') {		sList = window.open('/adminsite/menu/menu.jsp?MODE=GROUPE&CODE='+value, 'menu2', 'scrollbars=yes, resizable=yes, status=yes, width=600, height=400, top=320, left=320');	}	//JSS 20040419 : affichage arbre groupe en fonction du perimetre (back-office)	else if (typeAide.indexOf('groupebo/') != -1)	{		// formatte comme suit groupebo/type/objet/action		var indexSlash1 = typeAide.indexOf('/');		var indexSlash2 = typeAide.indexOf('/', indexSlash1 + 1);		var indexSlash3 = typeAide.indexOf('/', indexSlash2 + 1);		var permission = typeAide.substring(indexSlash1+1,typeAide.length);		sList = window.open('/adminsite/menu/menu.jsp?MODE=GROUPE&CODE='+value+'&PERMISSION='+permission, 'menu2', 'scrollbars=yes, resizable=yes, status=yes, width=600, height=400, top=320, left=320');	}	else if (typeAide == 'public_vise_dsi') {		sList = window.open('/adminsite/menu/menu.jsp?MODE=GROUPE&CODE='+value+'&PUBLIC_VISE=1', 'menu2', 'scrollbars=yes, resizable=yes, status=yes, width=600, height=400, top=320, left=320');	}	// JSS 20040419 : arbre des groupes	else if (typeAide.indexOf('publicbo/') != -1) {		// formatte comme suit publicbo/type/objet/action		var indexSlash1 = typeAide.indexOf('/');		var indexSlash2 = typeAide.indexOf('/', indexSlash1 + 1);		var indexSlash3 = typeAide.indexOf('/', indexSlash2 + 1);		var permission = typeAide.substring(indexSlash1+1,typeAide.length);		sList = window.open('/adminsite/menu/menu.jsp?MODE=GROUPE&CODE='+value+'&PUBLIC_VISE=1&PERMISSION='+permission, 'menu2', 'scrollbars=yes, resizable=yes, status=yes, width=600, height=400, top=320, left=320');	}	else if (typeAide.indexOf('fichefil') != -1) {		var proc = typeAide.substring(typeAide.indexOf('fichefil')+8,typeAide.length).toUpperCase();		sList = window.open("/servlet/com.jsbsoft.jtf.core.SG?PROC="+proc+"&ACTION=RECHERCHER&TOOLBOX=LIEN_INTERNE", "fichefil", "width=500,height=500,top=210,left=310,scrollbars=yes, resizable=yes, status=yes");	}	else if (typeAide == 'pagelibre') {		sList = window.open("/servlet/com.jsbsoft.jtf.core.SG?PROC=SAISIE_PAGELIBRE&ACTION=RECHERCHER&TOOLBOX=LIEN_INTERNE&LANGUE_ARTICLE=0", "pagelibre", "width=500,height=330,top=210,left=310, scrollbars=yes, resizable=yes, status=yes");	}	/* AM 200309 creation de page libre */	else if (typeAide == ('pagelibre_creation')){		 field2="LIBELLE_CODE_PAGE_TETE";		 sList = window.open("/servlet/com.jsbsoft.jtf.core.SG?PROC=TRAITEMENT_PAGELIBRE&ACTION=AJOUTER&LANGUE=0&CODE_RUBRIQUE="+f2, "pagelibre_creation", "width=500,height=330,top=210,left=310, scrollbars=yes, resizable=yes, status=yes");	}	else if (typeAide == 'utilisateur') {		sList = window.open("/servlet/com.jsbsoft.jtf.core.SG?PROC=SAISIE_UTILISATEUR&ACTION=RECHERCHER&MODE=RECHERCHE", "utilisateur", "width=550, height=500, top=210, left=290, scrollbars=yes, resizable=yes, status=yes");	}	else if (typeAide == 'phototheque') {		sList = window.open("/servlet/com.jsbsoft.jtf.core.SG?PROC=SAISIE_PHOTO&ACTION=RECHERCHER&MODE_PHOTOTHEQUE=PHOTOTHEQUE", "photo", "width=650,height=535,top=20,left=100, scrollbars=yes, resizable=yes, status=yes");	}	else if (typeAide == 'photo') {		indice='';		if (f1=='' && f2=='')		{			indice = window.document.forms[indiceForm].NB_FICHIER_JOINT.value;			eval('window.document.forms[indiceForm].NO_FICHIER_JOINT.value = '+indice+'');		}		sList = window.open("/servlet/com.jsbsoft.jtf.core.SG?PROC=SAISIE_PHOTO&ACTION=RECHERCHER&MODE_PHOTOTHEQUE=SELECTION&NO_FICHIER_JOINT="+indice, "photo", "width=650,height=535,top=20,left=100, scrollbars=yes, resizable=yes, status=yes");	}	else if (typeAide == 'image') {		sList = window.open("/servlet/com.jsbsoft.jtf.core.SG?PROC=SAISIE_PHOTO&ACTION=RECHERCHER&MODE_PHOTOTHEQUE=SAISIE", "photo", "width=650,height=535,top=20,left=100, scrollbars=yes, resizable=yes, status=yes");	}	else if (typeAide == 'pagetete') {		sList = window.open("/adminsite/toolbox/choix_objet.jsp?TOOLBOX=PAGE_TETE", "list", "width=520,height=440,top=10,left=100, scrollbars=yes, resizable=yes, status=yes");		pageTete = true;	}	else if (typeAide == 'commentaire') {    		sList = window.open("/adminsite/toolbox/choix_objet.jsp?TOOLBOX=COMMENTAIRE", "list", "width=500,height=330,top=100,left=100, scrollbars=yes, resizable=yes, status=yes");		pageTete = true;	}	else if (typeAide == 'requete') {		field1 = "";		field2 = f2;		nomForm = "";		fieldRequete = f1;		if (field2 == 'STATS') {			field2 = "";			sList = window.open("/adminsite/toolbox/choix_objet.jsp?TOOLBOX=LIEN_REQUETE&RESTRICTION=STATS", "list", "width=500,height=330,top=100,left=100,scrollbars=yes,status=yes");		}		else {			field2 = "";			sList = window.open("/adminsite/toolbox/choix_objet.jsp?TOOLBOX=LIEN_REQUETE&RESTRICTION=XML", "list", "width=500,height=330,top=100,left=100,scrollbars=yes,status=yes");		}	}}/* Demande d'affichage d'une fenetre par un champ en front */function showMessageChamp(typeAide, f1, f2, nomFormulaire){	if (typeAide.indexOf('structure') != -1)	{		 typeAide = 'strfo' + typeAide.substring(typeAide.indexOf('structure')+9, typeAide.length);	}	showMessageField2 (typeAide, f1, f2, nomFormulaire);}/* Ouvre la popup de recherche d'un objet */function ouvrirFenetreRechercheParProcessus(processus, f1, f2) {	field1 = f1;	field2 = f2;	nomForm = "";	fieldRequete = "";	texte = "";	nomApplet = "";	typeInsertion="";	nomFenetre ="";	if (processus.indexOf('&')!=-1)	{		nomFenetre = processus.substring(0,processus.indexOf('&'));	}	sList = window.open("/servlet/com.jsbsoft.jtf.core.SG?PROC="+processus+"&ACTION=RECHERCHER&TOOLBOX=LIEN_INTERNE&LANGUE_ARTICLE=-1", "RECHERCHE_"+nomFenetre, "width=500, height=330, top=150, left=150, scrollbars=yes, resizable=yes, status=yes");}/* Demande d'affichage d'une fenetre par un textarea */function showMessageTextArea (typeAide, langue, toolboxName) {		nomApplet = "";	// JSS 20020612-001 Type d'insertion (liste)	typeInsertion="";	texte = toolboxName;	field1 = "";	field2 = "";	nomForm = "";	fieldRequete = "";	// JSS 20020612-001 Type d'insertion (liste)	if (typeAide == 'liste') {		sList =  window.open("/adminsite/toolbox/choix_objet.jsp?TOOLBOX=LIEN_REQUETE&LISTE_INCLUSE=1", "list", "width=500,height=330,top=100,left=100,scrollbars=yes,status=yes");		typeInsertion = "liste";	}	if (typeAide == 'lien')		sList = window.open("/adminsite/toolbox/choix_lien.jsp?LANGUE_ARTICLE="+langue, "list", "width=500,height=330,top=100,left=100,scrollbars=yes,status=yes");	if (typeAide == 'mailto')		sList = window.open("/adminsite/toolbox/mailto.jsp?LANGUE_ARTICLE="+langue, "list", "width=500,height=330,top=100,left=100,scrollbars=yes,status=yes");	if (typeAide == 'image')		sList = window.open("/servlet/com.jsbsoft.jtf.core.SG?PROC=SAISIE_PHOTO&ACTION=RECHERCHER&MODE_PHOTOTHEQUE=INSERTION", "photo", "width=650,height=535,top=20,left=100,scrollbars=yes");}function inBackOffice() {	for (i = 0; i < window.document.forms.length; i++)	{		if ( (window.document.forms[i].name == 'RECHERCHE_WEB' || window.document.forms[i].name == nomForm )			&& window.document.forms[i].name != "")			return false;	}	return true;}// JSS 20020612-001 Type d'insertion (liste)/* Remplacement des & par des # (plantage NetWord) */function conversionRequete (objet,  code)	{	do	{	  i =  code.indexOf('&');	  if (i != -1)	{		code = code.substring(0,i) + "#" + code.substring(i+1, code.length);	  }	}	while (i != -1);	param = "objet="+objet;	if (code.length > 0)	   param = param + "#" + code;	return param;}/* Effacement du libelle d'un champ de recherche */function effacerTextField (zoneSaisie, zoneLibelle, value, libelle)	{	if (inBackOffice()) {		/* Cas de l'administration */		eval( "window.document.forms[0]."+zoneSaisie+".value = value;");		eval( "window.document.forms[0]."+zoneLibelle+".value = libelle;");		eval( "window.document.forms[0]."+zoneLibelle+".title = '';");	}	else {		eval( "window.document.RECHERCHE_WEB."+zoneSaisie+".value = value;");		eval( "window.document.RECHERCHE_WEB."+zoneLibelle+".value = libelle;");		eval( "window.document.RECHERCHE_WEB."+zoneLibelle+".title = '';");	}}/* Effacement du libelle d'un champ de recherche */function effacerTextChamp( zoneSaisie, zoneLibelle, value, libelle, nomForm)	{		eval( "window.document."+nomForm+"."+zoneSaisie+".value = value;");		eval( "window.document."+nomForm+"."+zoneLibelle+".value = libelle;");}/* Renvoyer des valeurs a la fenetre fille */function renvoyerNewLien(nouveauLien)	{	window.opener.modifieLien(nouveauLien);	window.close();}/* Renvoyer des valeurs a la fenetre fille */function renvoyerValeurs(objet, code, libelle, sInfobulle){	if (window.opener && ! window.opener.closed)	{		// cas d'une modification de lien		if (window.opener.liendanskt)		{			window.opener.modifieLien(objet, code, libelle);		}		// cas d'un rattachement rubrique par exemple		else if (window.opener.field1 != "" || window.opener.field2 != "" || window.opener.fieldRequete != "")		{			window.opener.saveField(objet, code, libelle, sInfobulle);		}		// cas d'un lien dans la toolbox		else		{			window.opener.save(objet, code, libelle); // tag kportal dans la toolbox		}	}	window.close();}/* Traitement des donnees resultats renvoyees par la fenetre mere */function saveField(objet, code, libelle, sInfobulle) {	/* Cas de l'administration */	if (inBackOffice())	{		if (! pageTete) {			/* Cas de l'administration */			if (field1 != "")				eval( "window.document.forms[0]."+field1+".value = code;");			if (field2 != "")			{				var oLabelField = window.document.forms[0].elements[field2];				oLabelField.value = libelle;				oLabelField.title = (sInfobulle ? sInfobulle : libelle);			}			/*AM 200501: parcours LMD			if (ajoutAuto != "") {				eval("ajouter"+ajoutAuto+"();");				ajoutAuto = "";			}			//AM 200501: parcours LMD			if (modifAuto != "") {				eval("validmodif"+modifAuto+"();");				modifAuto = "";			}*/		}		else {			/* Cas d'une page de tete : on ajoute le type d'objet au code */			if (field1 != "")				eval( "window.document.forms[0]."+field1+".value = code+',TYPE='+objet;");			if (field2 != "")				eval( "window.document.forms[0]."+field2+".value = objet + ' : ' +libelle;");		}	}	else {		/* Cas particulier du WEB */			var formCourant = "RECHERCHE_WEB";			if( nomForm.length > 0)				formCourant = nomForm;		if (field1 != "")			eval( "window.document."+formCourant+"."+field1+".value = code;");		if (field2 != "")		{			var oLabelField = window.document.forms[formCourant].elements[field2];			oLabelField.value = libelle;			/*if (sFilAriane)			{				oLabelField.title = sFilAriane;			}*/			oLabelField.title = (sInfobulle ? sInfobulle : libelle);		}	}		if (fieldRequete != "") {		chaine = "\"OBJET="+objet;		if( code.length > 0)		{			chaine = chaine +"&"+code;		}		chaine = chaine +"\"";		eval( "window.document.forms[0]."+fieldRequete+".value = "+ chaine );	}	field1 = "";	field2 = "";	nomForm = "";	fieldRequete = "";	texte = "";	nomApplet = "";	// JSS 20020612-001 Type d'insertion (liste)	typeInsertion="";			pageTete = false;}/* Renvoyer des valeurs a la fenetre fille */function renvoyerImage(id, height, width, alt, border, hspace, vspace, align){	if (window.opener && ! window.opener.closed)	{		window.opener.renvoyerImagePopup( id, height, width, alt, border, hspace, vspace, align)	}	window.close();}function renvoyerFormulaire(code, style,element){	if (window.opener && !window.opener.closed && window.opener.nomApplet != "")	{		window.opener.saveFormulaire(code,style,element);	}		window.close();}function renvoyerPageLibre(code, titre, langue) {	if (window.opener && !window.opener.closed)		window.opener.savePageLibre(code, titre, langue);	window.close();}function renvoyerDocument(id, titre, NOM_FICHIER_JOINT, POIDS_FICHIER_JOINT, FORMAT_FICHIER_JOINT, PATH_FICHIER_JOINT, NOMFORM){	if (window.opener && ! window.opener.closed)	{		if (window.opener.liendanskt)			window.opener.modifieLien("", id, "");		else if (window.opener.nomApplet != "")			window.opener.saveDocument(id, titre, NOM_FICHIER_JOINT, POIDS_FICHIER_JOINT, FORMAT_FICHIER_JOINT, PATH_FICHIER_JOINT, NOMFORM);		else			window.opener.saveFormDocument(id, titre, NOM_FICHIER_JOINT, POIDS_FICHIER_JOINT, FORMAT_FICHIER_JOINT, PATH_FICHIER_JOINT, NOMFORM);	}	window.close();}function saveFormDocument(id, titre, NOM_FICHIER_JOINT, POIDS_FICHIER_JOINT, FORMAT_FICHIER_JOINT, PATH_FICHIER_JOINT, NOMFORM)	{	var nomForm = '0';	if (NOMFORM)		nomForm=NOMFORM;	if (field1 != "") {  		eval( "window.document.forms['"+nomForm+"']."+field1+".value = id;");  		eval( "window.document.forms['"+nomForm+"']."+field2+".value = titre;");  		eval( "window.document.forms['"+nomForm+"'].NOM_"+field1+".value = NOM_FICHIER_JOINT;");  		eval( "window.document.forms['"+nomForm+"'].POIDS_"+field1+".value = POIDS_FICHIER_JOINT;");  		eval( "window.document.forms['"+nomForm+"'].FORMAT_"+field1+".value = FORMAT_FICHIER_JOINT;");  		eval( "window.document.forms['"+nomForm+"'].PATH_"+field1+".value = PATH_FICHIER_JOINT;");	}	if( texte != "") {		var codeHtml = '<a';		codeHtml += " href=\"[id-document];"+id+"[/id-document]\" >";		codeHtml += titre+"</a>";		insererTexte( texte, codeHtml);	}	field1 = "";	field2 = "";	nomForm = "";	fieldRequete = "";	texte = "";	nomApplet = "";}/* Ouverture d'une nouvelle fenetre fille */function ouvrir_fen (url) {	Xmas95 =new Date();	secs = Xmas95.getSeconds();	var name = "win" + secs;        //EL 20051221 rajout resizable=yes pour IE :	window.open(url,name,'status=yes,toolbar=no,scrollbars=yes,width=600,height=550,resizable=yes');}function ouvrir_fen_web (url) {	Xmas95 =new Date();	secs = Xmas95.getSeconds();	var name = "win" + secs;	window.open(url,name,'status=yes,menubar=yes, toolbar=yes, resizable=yes, scrollbars=yes, width=600, height=400');}function ouvrir_fen_x_y (url, x, y) {	Xmas95 =new Date();	secs = Xmas95.getSeconds();	var name = "win" + secs;	window.open(url,name,'resizable=yes,status=yes,toolbar=no,scrollbars=yes,width='+x+',height='+y);}function ouvrir_fen_w_h_name(url, width, height, name){	window.open(url,name,'status=yes,toolbar=no,scrollbars=yes,width='+width+',height='+height);} /* Nettoyage du code HTML avant de l'envoyer dans l'url */function nettoyerCodeHTML ( s) {	/* Suppression des caracteres dont code > 255 : fait planter url 	   (peuvent etre inseres par coller)	*/	s2 = s;	for (i=0; i<s2.length;i++){		var charCode = s2.charCodeAt ( i);		if ( charCode > 255) {			// Traitement special pour caractere 8217			if( charCode == 8217)				s2 = s2.substring( 0, i) + "'" + s2.substring( i+1, s2.length);			else if( charCode == 8364)				s2 = s2.substring( 0, i) + "&euro;" + s2.substring( i+1, s2.length);			else if( charCode == 8211)				s2 = s2.substring( 0, i) + "-" + s2.substring( i+1, s2.length);			else if( charCode == 8230)				s2 = s2.substring( 0, i) + "..." + s2.substring( i+1, s2.length);						else if( charCode == 339) 				s2 = s2.substring( 0, i) + "&oelig;" + s2.substring( i+1, s2.length);			else				s2 = s2.substring( 0, i) + s2.substring( i+1, s2.length);			//JSS 20020923-001			i=i-1;		}	}	if (s2 == '<p>&nbsp;</p>' || s2 == '<br />')	{		s2 = '';	}	return s2;}// RP 20041611 ajout fonctions collaboratif /* Gestion des fichiers joints */var arrayFichiergw = new Array(); var arrayFichierJointUnique = new Array();var modeFichier = "";var espace = "";var indiceForm = "";// constructeur de la classefunction Fichiergw(p1, p2, p3, p4, p5, p6){	this.id = p1;	this.nom = p2;	this.format = p3;	this.version = p4;	this.date = p5;	this.poids = p6;}// ajout d'un fichier// appel du processus TRAITEMENT_FICHIERGW_FRONTfunction ajouterFichiergw(indice,saisieFront){	if (saisieFront==null)		 saisieFront= '';	if (indice && indice!=''){		eval( "window.document.forms[0].NO_FICHIER_JOINT.value = "+indice+"");	}	else{		indice = window.document.forms[indiceForm].NB_FICHIER_JOINT.value;		eval('window.document.forms[indiceForm].NO_FICHIER_JOINT.value = '+indice+'');	}	if (modeFichier.indexOf('document') !=-1){		window.open("/servlet/com.jsbsoft.jtf.core.SG?PROC=TRAITEMENT_FICHIERGW_FRONT&ACTION=INSERER"+saisieFront+"&NO_FICHIER_JOINT="+indice+"&MODE="+modeFichier+"&ESPACE="+espace+"", "fichiergw", "width=600, height=300, resizable=yes, scrollbars=yes, status=no");	}	else{		window.open("/servlet/com.jsbsoft.jtf.core.SG?PROC=TRAITEMENT_FICHIERGW_FRONT&ACTION=INSERER"+saisieFront+"&NO_FICHIER_JOINT="+indice+"&MODE="+modeFichier+"&ESPACE="+espace+"", "fichiergw", "width=600, height=300, resizable=yes, scrollbars=yes, status=no");	}}// suppression d'un fichier uniquement javascript// traitement physique a la validationfunction supprimerFichiergw(indice){	reponse=confirm("Supprimer définitivement le fichier?");	if (reponse){				//mise à jour du poids total des fichiers ajoutés		if( window.document.forms[indiceForm].POIDS_TOTAL_FICHIERS) {			var totalPoids = parseInt(window.document.forms[indiceForm].POIDS_TOTAL_FICHIERS.value)-parseInt(arrayFichiergw[indice].poids);			eval('window.document.forms[indiceForm].POIDS_TOTAL_FICHIERS.value = '+totalPoids+'');		}				arrayFichiergw[indice] = null;		preparerFichiergw();	}}// renvoi du fichier a la fin du processus TRAITEMENT_FICHIERGW_FRONTfunction renvoyerFichiergw(ID_FICHIER_JOINT, NOM_FICHIER_JOINT, FORMAT_FICHIER_JOINT, VERSION_FICHIER_JOINT, DATE_FICHIER_JOINT, NO_FICHIER_JOINT,MODE, POIDS_FICHIER) {	window.opener.saveFormFichiergw(ID_FICHIER_JOINT, NOM_FICHIER_JOINT, FORMAT_FICHIER_JOINT, VERSION_FICHIER_JOINT, DATE_FICHIER_JOINT, NO_FICHIER_JOINT,MODE, POIDS_FICHIER);	window.close();}function saveFormFichiergw(ID_FICHIER_JOINT, NOM_FICHIER_JOINT, FORMAT_FICHIER_JOINT, VERSION_FICHIER_JOINT, DATE_FICHIER_JOINT, NO_FICHIER_JOINT,MODE, POIDS_FICHIER)	{		var fic = new Fichiergw(ID_FICHIER_JOINT,NOM_FICHIER_JOINT,FORMAT_FICHIER_JOINT,VERSION_FICHIER_JOINT,DATE_FICHIER_JOINT,POIDS_FICHIER);		if (MODE.indexOf('simple') !=-1){			arrayFichierJointUnique[NO_FICHIER_JOINT]=fic;			preparerFichiergwUnique(NO_FICHIER_JOINT);		}		else{			arrayFichiergw[NO_FICHIER_JOINT]=fic;			preparerFichiergw();			if( window.document.forms[indiceForm].NB_FICHIER_JOINT){				t = parseInt(window.document.forms[indiceForm].NB_FICHIER_JOINT.value)+1;				eval('window.document.forms[indiceForm].NB_FICHIER_JOINT.value = '+t+'');			}						//mise à jour du poids total des fichiers ajoutés			if( window.document.forms[indiceForm].POIDS_TOTAL_FICHIERS){				var totalPoids = parseInt(window.document.forms[indiceForm].POIDS_TOTAL_FICHIERS.value)+parseInt(POIDS_FICHIER);				eval('window.document.forms[indiceForm].POIDS_TOTAL_FICHIERS.value = '+totalPoids+'');			}		}}// preparation pre-validation// concatenation du tableau de fichiers pour sauvegardefunction preparerFichiergw(){		var temp = '';		for (i=0;i<arrayFichiergw.length;i++){				if(arrayFichiergw[i]){				if (temp.length>0){					temp += "|";				}				temp += arrayFichiergw[i].id+";"+arrayFichiergw[i].nom+";"+arrayFichiergw[i].format+";"+arrayFichiergw[i].version+";"+arrayFichiergw[i].date+";"+arrayFichiergw[i].poids;			}		}		window.document.forms[indiceForm].TOTAL_FICHIER_JOINT.value = temp;	affichageFichiergw();}// affichage des fichiers// soit une liste si n fichiers// soit un fichier unique (ex:logo)function affichageFichiergw(){	var temp = '';	var div = document.getElementById('inner-fichier');	if (modeFichier.indexOf('document') !=-1)	{		// specifique pour les fichiers avec gestion de version		for (i=0;i<arrayFichiergw.length;i++){				if(arrayFichiergw[i]){				temp += "<tr><td><input type=\"input\" id=\"version-fichier\" class=\"champ-saisie\" readonly=\"readonly\" name=\"VERSION_FICHIER_JOINT_"+i+"\" size=\"1\" value=\""+arrayFichiergw[i].version+"\" /></td>";				temp += "<td><input type=\"input\" id=\"date-fichier\" class=\"champ-saisie\" readonly=\"readonly\" name=\"DATE_FICHIER_JOINT_"+i+"\" size=\"6\" value=\""+arrayFichiergw[i].date+"\" /></td>";				temp += "<td><input type=\"input\" id=\"libelle-fichier\" class=\"champ-saisie\" readonly=\"readonly\" name=\"LIBELLE_FICHIER_JOINT_"+i+"\" size=\"30\" value=\""+arrayFichiergw[i].nom+"\" /></td>";				temp += "<td><input type=\"button\" class=\"bouton\" value=\"Supprimer\" onclick=\"supprimerFichiergw('"+i+"');\" /></td></tr>";			}		}	}	else{		// liste de fichiers par defaut		for (i=0;i<arrayFichiergw.length;i++){				if(arrayFichiergw[i]){				temp += "<tr><td><input type=\"input\" id=\"libelle-fichier\" class=\"champ-saisie\" readonly=\"readonly\" name=\"LIBELLE_FICHIER_JOINT_"+i+"\" size=\"30\" value=\""+arrayFichiergw[i].nom+"\" /></td>";				temp += "<td><input type=\"button\" id=\"supprimer-fichier\" class=\"bouton\" value=\"Supprimer\" onclick=\"supprimerFichiergw('"+i+"');\" /></td></tr>";			}		}	}	if (is.ie){		div.outerHTML = '<table id ="inner-fichier">'+temp.toString()+'</table>';	}	else{		div.innerHTML = temp.toString();	}}// preparation pre-validation// concatenation du fichier jointfunction preparerFichiergwUnique(indice){	if (arrayFichierJointUnique[indice]){		fichierJointUnique = arrayFichierJointUnique[indice];		temp = fichierJointUnique.id+";"+fichierJointUnique.nom+";"+fichierJointUnique.format+";"+fichierJointUnique.version+";"+fichierJointUnique.date;		zoneFichier = 'FICHIER_UNIQUE_'+indice;		zoneLibelle = 'LIBELLE_FICHIER_'+indice;		eval("window.document.forms[indiceForm]."+zoneFichier+".value = '"+temp+"';");		eval("window.document.forms[indiceForm]."+zoneLibelle+".value = '"+fichierJointUnique.nom+"';");}	}//specifique fichier unique ex:logo espace collaoboratif// attention l'index du formulaire est variable selon les pagefunction effacerFichier(indice){	if (arrayFichierJointUnique[indice]){			arrayFichierJointUnique[indice]=null;			zoneFichier = 'FICHIER_UNIQUE_'+indice;			zoneLibelle = 'LIBELLE_FICHIER_'+indice;			eval("window.document.forms[indiceForm]."+zoneFichier+".value = '';");			eval("window.document.forms[indiceForm]."+zoneLibelle+".value = 'Cliquer sur parcourir';");	}}/* Gestion des dossiers */var arrayDossiergw = new Array(); //constructeur de la classefunction Dossiergw(p1, p2, p3, p4, p5){	this.id = p1;	this.code = p2;	this.parent = p3;	this.nom = p4;	this.espace = p5;}function visualiserDossiergw(idfiche, typefiche, espace){	window.open("/servlet/com.jsbsoft.jtf.core.SG?PROC=TRAITEMENT_DOSSIERGW_FRONT&ACTION=VISUALISER&SAISIE_FRONT=true&ESPACE="+espace+"&ID_FICHE="+idfiche+"&TYPE_FICHE="+typefiche+"", "dossiergw", "width=400, height=400, scrollbars=yes, resizable=yes, status=no");}function ajouterDossiergw(nomForm){	if (!nomForm && indiceForm){		nomForm = indiceForm;	}	if (d.aNodes[d.selectedNode]){		codeParent = d.aNodes[d.selectedNode].id;		espace = '';		if (document.forms[nomForm].ESPACE.value)		{			espace = document.forms[nomForm].ESPACE.value;		}		window.open("/servlet/com.jsbsoft.jtf.core.SG?PROC=TRAITEMENT_DOSSIERGW_FRONT&ACTION=INSERER&SAISIE_FRONT=true&ESPACE="+espace+"&CODE_PARENT="+codeParent+"", "Dossiergw", "width=400, height=200, status=no");	}else{		alert("Veuillez sélectionner un emplacement!");	}}function supprimerDossiergw(nomForm){	if (!nomForm && indiceForm){		nomForm = indiceForm;	}	if (d.aNodes[d.selectedNode]){		code = d.aNodes[d.selectedNode].id;		if (code==0){			alert("Vous ne pouvez pas supprimer la racine!");		}else{			espace = '';			if (document.forms[nomForm].ESPACE.value){				espace = document.forms[nomForm].ESPACE.value;			}			idfiche = '';			if (document.forms[nomForm].ID_FICHE.value)			{				idfiche = document.forms[nomForm].ID_FICHE.value;			}			typefiche = '';			if (document.forms[nomForm].TYPE_FICHE.value)			{				typefiche = document.forms[nomForm].TYPE_FICHE.value;			}			window.open("/servlet/com.jsbsoft.jtf.core.SG?PROC=TRAITEMENT_DOSSIERGW_FRONT&ACTION=SUPPRIMER&SAISIE_FRONT=true&ESPACE="+espace+"&CODE_DOSSIER="+code+"&ID_FICHE="+idfiche+"&TYPE_FICHE="+typefiche+"", "Dossiergw", "width=400, height=200, status=no"); 		}	}else{		alert("Veuillez sélectionner un dossier!");	}}function renommerDossiergw(nomForm){	if (!nomForm && indiceForm){		nomForm = indiceForm;	}	if (d.aNodes[d.selectedNode]){		code = d.aNodes[d.selectedNode].id;		if (code==0){			alert("Vous ne pouvez pas modidier la racine!");		}else{			espace = '';			if (document.forms[nomForm].ESPACE.value){				espace = document.forms[nomForm].ESPACE.value;			}			window.open("/servlet/com.jsbsoft.jtf.core.SG?PROC=TRAITEMENT_DOSSIERGW_FRONT&ACTION=MODIFIER&SAISIE_FRONT=true&ESPACE="+espace+"&CODE_DOSSIER="+code+"", "Dossiergw", "width=400, height=200, status=no"); 		}	}else{		alert("Veuillez sélectionner un dossier!");	}}function deplacerDossiergw(nomForm){	if (!nomForm && indiceForm){		nomForm = indiceForm;	}	if (d.aNodes[d.selectedNode]){		code = d.aNodes[d.selectedNode].id;		if (code==0){			alert("Vous ne pouvez pas modidier la racine!");		}else{			espace = '';			if (document.forms[nomForm].ESPACE.value){				espace = document.forms[nomForm].ESPACE.value;			}			window.open("/servlet/com.jsbsoft.jtf.core.SG?PROC=TRAITEMENT_DOSSIERGW_FRONT&ACTION=DEPLACER&SAISIE_FRONT=true&ESPACE="+espace+"&CODE_DOSSIER="+code+"", "Dossiergw", "width=400, height=400, resizable=yes, status=no"); 		}	}else{		alert("Veuillez sélectionner un dossier!");	}}function synchroniserDossiergw(nomForm) {	if (!nomForm && indiceForm){		nomForm = indiceForm;	}	if (d.aNodes[d.selectedNode]){		code =d.aNodes[d.selectedNode].id;		window.opener.arrayDossiergw = arrayDossiergw;		window.close();		if (code==0){			window.opener.document.forms[nomForm].LIBELLE_DOSSIER.value="Racine (par défaut)";			window.opener.document.forms[nomForm].NOM_DOSSIER.value="";			window.opener.document.forms[nomForm].DOSSIER.value="";		}else{			window.opener.document.forms[nomForm].DOSSIER.value=code;			if (arrayDossiergw.length>0)			{				for (i=0;i<arrayDossiergw.length;i++)				{					if(arrayDossiergw[i])					{						if (arrayDossiergw[i].code==code)						{							window.opener.document.forms[nomForm].LIBELLE_DOSSIER.value=arrayDossiergw[i].nom;							window.opener.document.forms[nomForm].NOM_DOSSIER.value=arrayDossiergw[i].nom;						}					}				}			}		}	}else{		window.opener.arrayDossiergw = arrayDossiergw;		window.close();		window.opener.document.forms[nomForm].DOSSIER.value="";		window.opener.document.forms[nomForm].LIBELLE_DOSSIER.value="Racine (par défaut)";		window.opener.document.forms[nomForm].NOM_DOSSIER.value="";	}}function fermerDossiergw(nomForm){	if (!nomForm && indiceForm){		nomForm = indiceForm;	}	window.opener.arrayDossiergw = arrayDossiergw;	window.close();	if (window.opener.document.forms[nomForm].NOM_DOSSIER.value=="")	{		window.opener.document.forms[nomForm].LIBELLE_DOSSIER.value="Racine (par défaut)";		window.opener.document.forms[nomForm].NOM_DOSSIER.value="";	}}function affichageDtreeDossiergw(url){	if (url == '')		url = '#';	d = new dTree('d');			d.add(0,-1,'Racine',url,'','','/adminsite/utils/dtree/img/dd.gif','/adminsite/utils/dtree/img/dd.gif');	if (arrayDossiergw.length>0)	{		for (i=0;i<arrayDossiergw.length;i++)		{			if(arrayDossiergw[i])			{				if (arrayDossiergw[i].parent != "")				{					d.add(arrayDossiergw[i].code,arrayDossiergw[i].parent,arrayDossiergw[i].nom,url,'','','/adminsite/utils/dtree/img/folder.gif','/adminsite/utils/dtree/img/folderopen.gif');				}				else				{					d.add(arrayDossiergw[i].code,0,arrayDossiergw[i].nom,url,'','','/adminsite/utils/dtree/img/folder.gif','/adminsite/utils/dtree/img/folderopen.gif');				}			}		}				}	document.write(d);	d.openAll();}/* Gestion de la palette des couleurs */function popup_color_picker(nom1,nom2){	titreCouleur = nom1;	titreExemple = nom2;	var width = 400;	var height = 260;	window.open('/adminsite/utils/colpick/color_picker.jsp?COULEUR='+titreCouleur+'&EXEMPLE='+titreExemple+'&FORM='+indiceForm+'', 'cp', 'resizable=no, location=no, width='				+width+', height='+height+', menubar=no, status=yes, scrollbars=no, menubar=no');}function effacerCouleur(nom1,nom2){	window.document.forms[indiceForm].elements[nom2].style.borderColor = '';	window.document.forms[indiceForm].elements[nom2].style.backgroundColor = '';	window.document.forms[indiceForm].elements[nom1].value = '';}/* Gestion des documents */var arrayDocumentgw = new Array(); //constructeur de la classefunction Documentgw(p1, p2, p3, p4, p5){	this.id = p1;	this.code = p2;	this.url = p3;	this.libelle = p4;	this.dossier = p5}function affichageDtreeDocumentgw(){	ddoc = new dTree('ddoc');			ddoc.add(0,-1,'Liste des fichiers','#','','','','');	// gestion des dossiers	if (arrayDossiergw.length>0)	{		for (i=0;i<arrayDossiergw.length;i++)		{			if(arrayDossiergw[i])			{				if (arrayDossiergw[i].parent != "")				{					ddoc.add(arrayDossiergw[i].code,arrayDossiergw[i].parent,arrayDossiergw[i].nom,'#','','','/adminsite/utils/dtree/img/folder.gif','/adminsite/utils/dtree/img/folderopen.gif');				}				else				{					ddoc.add(arrayDossiergw[i].code,0,arrayDossiergw[i].nom,'#','','','/adminsite/utils/dtree/img/folder.gif','/adminsite/utils/dtree/img/folderopen.gif');				}			}		}	}	// gestion des documents	if (arrayDocumentgw.length>0)	{		for (i=0;i<arrayDocumentgw.length;i++)		{			if (arrayDocumentgw[i])			{				ddoc.add(arrayDocumentgw[i].code,arrayDocumentgw[i].dossier,arrayDocumentgw[i].libelle,arrayDocumentgw[i].url,'','','/adminsite/utils/dtree/img/page.gif','/adminsite/utils/dtree/img/page.gif');			}		}	}	document.write(ddoc);	ddoc.openAll();	}function afficher_calendrier(nom, form, url_image) {	if (! url_image)	{		url_image = "/adminsite/images/calendrier.png";	}	if (document.getElementById) {		document.write("<a href=\"#\" onclick=\"window.open('/adminsite/calendrier/calendrierjs.html?champ=" + nom + "&form=" + form +"', 'calendrier', 'width=135, height=138, toolbar=no, location=no, status=yes, resizable=yes'); return false;\"><img src=\""+url_image+"\" border=\"0\" alt=\"choisir une date\"></a>");	}}function afficher_actions(){	if (d.aNodes[d.selectedNode]){		code =d.aNodes[d.selectedNode].id;		if (code==0){			window.document.getElementById('folder_links').style.display = 'none';			window.document.getElementById('root_links').style.display = 'inline';					}else{			window.document.getElementById('root_links').style.display = 'none';			window.document.getElementById('folder_links').style.display = 'inline';		}	}}function selectionner_dossier(){	oNode = d.aNodes[d.selectedNode];	oForm = document.forms["RECHERCHE_WEB"];	oForm.CODE_DOSSIER_PARENT.value = oNode.id;	oForm.submit();}function replaceAll(str, search, repl) {	while (str.indexOf(search) != -1)		str = str.replace(search, repl);	return str;}/* =============================================== *//*   METHODES DE GESTION DES LISTES MULTIVALUEES   *//* =============================================== */var INPUT_FIELD = 0;var COMBO_BOX = 1;var ZONE_FIELD = 2;function MultivalueFieldItem(sCode, sLabel, sTitle){	this.sCode = sCode;	if (sLabel == '')	{		this.sLabel = sCode;	}	else	{		this.sLabel = sLabel;	}	this.sTitle = sTitle;	this.toString = function()	{		var s = 'sCode = ' + this.sCode;		s += ', sLabel = ' + this.sLabel;		if (this.sTitle)		{			s += ', sTitle = ' + this.sTitle;		}		return s;	}}function MultivalueField(oForm, sName, iTypeField){	//this.oForm = oForm;	// verrue kdecole pour liste en front	this.oForm = window.document.forms['RECHERCHE_WEB'] ? window.document.forms['RECHERCHE_WEB'] : oForm;	this.sName = sName;	this.iTypeField = iTypeField;	this.aItemList = new Array();	this.iSelectedItem = -1;	// Initialise le champ de saisie multiple	this.Init = function()	{		this.oCodesHiddenField = this.oForm.elements[sName];                 // champ caché contenant la liste des codes		this.oLabelsHiddenField = this.oForm.elements['LIBELLE_' + sName];   // champ caché contenant la liste des libellés		this.oTitlesHiddenField = this.oForm.elements['INFOBULLE_' + sName]; // champ caché contenant la liste des infobulles		this.oField = this.oForm.elements['TMP_' + sName];                   // champ de saisie (input, combo, ou zone)		if (this.iTypeField == ZONE_FIELD)		{			this.oLabelField = this.oForm.elements['LIBELLE_TMP_' + sName];  // champ contenant le libellé pour un champ zone		}		this.oSelect = this.oForm.elements['SELECT_' + sName];               // champ select multiple contenant les différentes valeurs		this.LoadData(); // charge le contenu de la liste multivaluée		if (this.aItemList.length > 0)		{			this.iSelectedItem = 0;		}		this.UpdateDisplay();	}	// Teste si l'élément est présent dans la liste	this.ContainsItem = function(oItem)	{		// parcourt la liste		var inList = false;		for (var i = 0; i < this.aItemList.length; i++)		{			if (oItem.sCode == this.aItemList[i].sCode)			{				inList = true;			}		}		return inList;	}	// Ajoute éventuellement un nouvel élément à la liste	this.Add = function()	{		// lit la saisie ou l'élément sélectionné (suivant le type de champ)		var sCode = ''; // TODO		var sLabel = '';		var sTitle;		if (this.iTypeField == INPUT_FIELD) // champ de saisie		{			sCode = this.oField.value;		}		else if (this.iTypeField == COMBO_BOX) // combo box		{			if (this.oField.selectedIndex > 0) // on n'est pas sur le premier élément (code != '0000')			{				sCode = this.oField.value;				sLabel = this.oField.options[this.oField.selectedIndex].text;				if (sLabel.charAt(0) == '-')				{					sCode = '';				}				sTitle = sLabel;			}		}		else if (this.iTypeField == ZONE_FIELD) // zone de saisie		{			sCode = this.oField.value;			sLabel = this.oLabelField.value;			sTitle = this.oLabelField.title;		}		if (sCode != '') // si il y a qqch à ajouter		{			var oItem = new MultivalueFieldItem(sCode, sLabel, sTitle);			//alert(oItem);			if (! this.ContainsItem(oItem)) // si l'élément n'est pas dans la liste			{				// ajoute l'élément à la fin de la liste				this.aItemList[this.aItemList.length] = oItem;				// sélectionne l'élément ajouté				this.iSelectedItem = this.aItemList.length-1;				// met à jour l'affichage				this.UpdateDisplay();				// met à jour le champ caché				this.SaveData();				// réinitialise le champ de saisie				if (this.iTypeField == INPUT_FIELD) // champ de saisie				{					this.oField.value = '';				}				else if (this.iTypeField == COMBO_BOX) // combo box				{					this.oField.selectedIndex = 0;				}				/*else if (this.iTypeField == ZONE_FIELD) // zone de saisie				{					effacerTextField('TMP_' + this.sName, 'LIBELLE_TMP_' + this.sName, '', 'Cliquer sur parcourir');				}*/			}			else			{				alert('Cette valeur a déjà été insérée.');			}		}	}	// Supprime l'élément sélectionné	this.Remove = function()	{		if (this.aItemList.length > 0) // la liste n'est pas vide		{			if (this.iSelectedItem != -1) // un élément est sélectionné			{				// décale les éléments suivants				for (var i = this.iSelectedItem; i < this.aItemList.length-1; i++)				{					this.aItemList[i] = this.aItemList[i+1];				}				// supprime le dernier élément en double				//this.aItemList[this.aItemList.length-1] = null;				this.aItemList.length--;				// met à jour la sélection				if (this.iSelectedItem == this.aItemList.length)				{					this.iSelectedItem--;				}				// met à jour l'affichage				this.UpdateDisplay();				// met à jour le champ caché				this.SaveData();			}			else			{				alert('Sélectionnez la valeur à supprimer.');			}		}	}	// Modifie l'élément sélectionné ( !!!! spécifique pour chaque type d'élément)	this.Modify = function()	{		if (this.aItemList.length > 0) // la liste n'est pas vide		{			if (this.iSelectedItem != -1) // un élément est sélectionné			{				specificModifyItem(this);			}			else			{				alert('Sélectionnez la valeur à modifier.');			}		}	}	// Met à jour l'élément sélectionné ( !!!! spécifique pour chaque type d'élément)	this.UpdateItem = function(item)	{		if (this.aItemList.length > 0) // la liste n'est pas vide		{			if (this.iSelectedItem != -1) // un élément est sélectionné			{				// met à jour l'élément selectionné				this.aItemList[this.iSelectedItem] = item;				// met à jour l'affichage				this.UpdateDisplay();				// met à jour le champ caché				this.SaveData();			}			else			{				alert('Sélectionnez la valeur à modifier.');			}		}	}	// Remonte l'élément sélectionné	this.MoveUp = function()	{		if (this.aItemList.length > 1 && // la liste contient plusieurs éléments,		    this.iSelectedItem != -1 &&  // un des éléments est sélectionné,		    this.iSelectedItem > 0)      // ce n'est pas le premier élément de la liste		{			// intervertit l'élément avec son précédent			var oItemTmp = this.aItemList[this.iSelectedItem];			this.aItemList[this.iSelectedItem] = this.aItemList[this.iSelectedItem - 1];			this.aItemList[this.iSelectedItem - 1] = oItemTmp;			// met à jour la sélection			this.iSelectedItem--;			// met à jour l'affichage			this.UpdateDisplay();			// met à jour le champ caché			this.SaveData();		}	}	// Descend l'élément sélectionné	this.MoveDown = function()	{		if (this.aItemList.length > 1 &&                    // la liste contient plusieurs éléments,		    this.iSelectedItem != -1 &&                     // un des éléments est sélectionné,		    this.iSelectedItem < this.aItemList.length - 1) // ce n'est pas le dernier élément de la liste		{			// intervertit l'élément avec son suivant			var oItemTmp = this.aItemList[this.iSelectedItem];			this.aItemList[this.iSelectedItem] = this.aItemList[this.iSelectedItem + 1];			this.aItemList[this.iSelectedItem + 1] = oItemTmp;			// met à jour la sélection			this.iSelectedItem++;			// met à jour l'affichage			this.UpdateDisplay();			// met à jour le champ caché			this.SaveData();		}	}	// Sélectionne un élément (à associer au onclick sur un élément)	this.SelectItem = function()	{		if (this.aItemList.length == 0)		{			this.iSelectedItem = -1;		}		else		{			this.iSelectedItem = this.oSelect.selectedIndex;		}	}	// Met à jour l'affichage HTML	this.UpdateDisplay = function()	{		this.oSelect.options.length = 0;		if (this.aItemList.length == 0)		{			this.oSelect.options[0] = new Option('--', -1);			this.oSelect.selectedIndex = 0;		}		else		{			var oItem;			for (var i = 0; i < this.aItemList.length; i++)			{				oItem = this.aItemList[i];				this.oSelect.options[i] = new Option(oItem.sLabel);				if (oItem.sTitle)				{					this.oSelect.options[i].title = oItem.sTitle;				}			}			this.oSelect.selectedIndex = this.iSelectedItem;		}	}	// Charge le contenu existant du champ	this.LoadData = function()	{		var aCodes = this.oCodesHiddenField.value.split(';');		var aLabels = this.oLabelsHiddenField.value.split(';');		var aTitles;		if (this.oTitlesHiddenField)		{			aTitles = this.oTitlesHiddenField.value.split(';');		}		for (var i = 0; i < aCodes.length; i++)		{			if (aCodes[i] != '' && aCodes[i] != '0000')			{				if (aTitles)				{					oItem = new MultivalueFieldItem(aCodes[i], aLabels[i], aTitles[i]);				}				else				{					oItem = new MultivalueFieldItem(aCodes[i], aLabels[i]);				}				//alert(oItem);				if (! this.ContainsItem(oItem)) // si l'élément n'est pas dans la liste				{					// ajoute l'élément à la fin de la liste					this.aItemList[this.aItemList.length] = oItem;				}			}		}	}	// Sauve le contenu existant du champ	this.SaveData = function()	{		this.oCodesHiddenField.value = '';		this.oLabelsHiddenField.value = '';		if (this.oTitlesHiddenField)		{			this.oTitlesHiddenField.value = '';		}		var oItem;		for (var i = 0; i < this.aItemList.length; i++)		{			oItem = this.aItemList[i];			if (i > 0)			{				this.oCodesHiddenField.value += ';';				this.oLabelsHiddenField.value += ';';				if (this.oTitlesHiddenField)				{					this.oTitlesHiddenField.value += ';';				}			}			this.oCodesHiddenField.value += oItem.sCode;			this.oLabelsHiddenField.value += oItem.sLabel;			if (this.oTitlesHiddenField)			{				this.oTitlesHiddenField.value += oItem.sTitle;			}		}	}}/* ============================================= *//*   METHODES DE GESTION DES OBJETS TECHNIQUES   *//* ============================================= */function soumettreAjoutSousObjet(nomObjet) {	nettoyerDonnees();	window.document.forms[0].ACTION.value = 'NOCTRL_AJOUTER_' + nomObjet;	window.document.forms[0].submit();}function soumettreModificationSousObjet(nomObjet, indice) {	nettoyerDonnees();	window.document.forms[0].ACTION.value = 'NOCTRL_MODIFIER_' + nomObjet + '#' + indice;	window.document.forms[0].submit();}function soumettreSuppressionSousObjet(nomObjet, indice) {	nettoyerDonnees();	window.document.forms[0].ACTION.value = 'NOCTRL_SUPPRIMER_' + nomObjet + '#' + indice;	window.document.forms[0].submit();}function soumettreValidationSousObjet(nomObjet) {	nettoyerDonnees();	window.document.forms[0].ACTION.value = 'VALIDER_' + nomObjet;	window.document.forms[0].submit();}function soumettreAnnulationSousObjet(nomObjet) {	nettoyerDonnees();	window.document.forms[0].ACTION.value= 'NOCTRL_ANNULER_' + nomObjet;	window.document.forms[0].submit();}//--></script>		<script type="text/javascript"  style="display:none"><!--/** * div, id = menuId, class = scroll_container * div/ul, id = subMenuId, class = scroll_content */function Carrousel(){    var oThis = this; 					// création d'une référence vers l'objet courant	this.sIdCarrousel = '';	this.iDuree = 2;					// duree en seconde pour le fade	this.bBoucleAuto = true;			// boolean	this.iPos = 0;						// element en cours	this.iNbItems = 0;					// nombre de li 	this.bActionable = true;		this.Init = function(sIdCarrousel)	{		// Attributs du composant		this.sIdCarrousel = sIdCarrousel;		var ulListe = document.getElementById(sIdCarrousel); 		// ul contenaut les actus renvoie la classe caroussel		// recuper nb items			 var filsUlListe = ulListe.getElementsByTagName("*");			 for(var i=0; i<filsUlListe.length; i++){			if( filsUlListe[i].id.indexOf(sIdCarrousel)>-1) {				this.iNbItems = this.iNbItems +1;			}    	 }	}	this.AfficheUnique = function(iIndex)	{		if (this.bActionable && iIndex <= this.iNbItems-1 && iIndex!=this.iPos )		{							this.SetActive(false);				new Effect.Fade(this.sIdCarrousel +'_' + this.iPos,{ duration: this.iDuree });				new Effect.Appear(this.sIdCarrousel +'_' + iIndex,{ duration: this.iDuree });				setTimeout(function() { oThis.SetActive(true); }, this.iDuree*1000);				this.iPos = iIndex;				this.ActualiserPositionPlayer(iIndex);				this.bBoucleAuto = false;		}	}		this.Affiche = function(iIndex)	{		// on ne peut pas afficher plus d'éléments que ce qu'on a dans la liste et on n'agit pas sur l'élément déjà affiché				if (this.bActionable && iIndex <= this.iNbItems-1 && iIndex!=this.iPos )		{							this.SetActive(false);				new Effect.Fade(this.sIdCarrousel +'_' + this.iPos,{ duration: this.iDuree });				new Effect.Appear(this.sIdCarrousel +'_' + iIndex,{ duration: this.iDuree });				setTimeout(function() { oThis.SetActive(true); }, this.iDuree*1000);				this.iPos = iIndex;				this.ActualiserPositionPlayer(iIndex);				//document.getElementById('position_courante').innerHTML=this.iPos+1 + '/'+ this.iNbItems;		}	}		this.ActualiserPositionPlayer = function(iIndex)	{		var ulPlayer = document.getElementById('player_slideshow_' + this.sIdCarrousel);		if (ulPlayer != null) {			 var filsulPlayer = ulPlayer.getElementsByTagName("*");			for(var i=0; i<filsulPlayer.length; i++){									filsulPlayer[i].className = 'lien_slideshow';	    	 }		}				var liPlayer = document.getElementById(this.sIdCarrousel + '_player_' + this.iPos);		if (liPlayer != null) {			liPlayer.className = liPlayer.className + " actif";		}	}	this.SetActive = function(actif) {		this.bActionable = actif;	}	this.Defile = function()	{		// gerer defilement		if (this.bBoucleAuto)		{			if (this.iPos < this.iNbItems-1) {				this.Affiche(this.iPos+1);			}			else {				this.Affiche(0);				this.bBoucleAuto=true;								//this.MasquerPause();			}			// gerer recursif			setTimeout(function() { oThis.Defile(); }, 7000);		}	}	this.Play = function(auto) 	{		if (this.bActionable){			this.bBoucleAuto = true;			this.MasquerPlay();			this.Defile();		}	}	this.Pause = function()	{		this.bBoucleAuto = false;		this.MasquerPause();	}	this.Suivant = function()	{		if (this.bActionable && this.iPos < this.iNbItems-1){					this.bBoucleAuto = false;			this.Affiche(this.iPos+1);			this.MasquerPause();		}	}	this.Precedent = function()	{		if (this.bActionable && this.iPos > 0){			this.bBoucleAuto = false;			this.Affiche(this.iPos-1);			this.MasquerPause();		}	}	this.MasquerPlay = function()	{		document.getElementById('bouton_pause').style.display='block';		document.getElementById('bouton_play').style.display='none';	}		this.MasquerPause = function()	{		document.getElementById('bouton_pause').style.display='none';		document.getElementById('bouton_play').style.display='block';	}		this.hauteurImage = function(sIdCarrousel)	{		var docPere = document.getElementById(sIdCarrousel);		var docFils = docPere.getElementsByTagName("*");							if (document.all) // ok I.E			{				H = docFils[0].currentStyle.height;			}			else // ok firefox.0.9.2 , pas mozilla.1.0 ni netscape.7.02			{				H = document.defaultView.getComputedStyle(docFils[0], null).height;			}						docPere.style.height= H ;			}}//--></script>		<script type="text/javascript"  style="display:none"><!--/** * div, id = menuId, class = scroll_container * div/ul, id = subMenuId, class = scroll_content */function Scroller(){	var oThis = this; 				this.Init = function(sScrollContainerId, sScrollingItemId, bVertical, iScrollingStep)	{		// Attributs du composant					this.oScrollContainer = $(sScrollContainerId);                 // container fenêtre de défilement (div)		this.oScrollingItem = $(sScrollingItemId);                     // zone de contenu défilant (div ou ul)		this.bVertical = bVertical;                                    // défilement horizontal ou vertical ?		this.iScrollingStep = (iScrollingStep ? iScrollingStep : 25);  // pas de défilement (en px)		this.iScrollContainerSize = 0;                                 // largeur/hauteur de la fenêtre de défilement (en px)		this.iScrollingItemSize = 0;                                   // largeur/hauteur de la zone de contenu défilant (en px)		this.iOffset = 0;                                              // position (en px)		this.iStartPositionOffset = 0;                                 // décalage de la position initiale de la zone défilante (en px)		this.iEndPositionOffset = 0;                                   // décalage de la position finale de la zone défilante (en px)		this.bActionable = true;		this.iDuration = 0.2 * this.iScrollingStep / 100;				//this.iOffset = Math.floor(oScrollingItem.getStyle('top').split('px')[0]);		if (this.bVertical) {			this.iScrollContainerSize = Math.floor(this.oScrollContainer.getStyle('height').split('px')[0]);			this.iScrollingItemSize = Math.floor(this.oScrollingItem.getStyle('height').split('px')[0]);		}		else {			this.iScrollContainerSize = Math.floor(this.oScrollContainer.getStyle('width').split('px')[0]);			this.iScrollingItemSize = Math.floor(this.oScrollingItem.getStyle('width').split('px')[0]);		}	}	this.SetPadding = function(paddingLeft, paddingRight)	{		this.iStartPositionOffset  = paddingLeft;		this.iEndPositionOffset = paddingRight;	}		// Renvoie une représentation de l'élément sous forme de chaine	this.ToString = function()	{		var s = '[sScrollContainerId=' + this.oScrollContainer.id + '; ';		s += 'sScrollingItemId=' + this.oScrollingItem.id + '; ';		s += 'bVertical=' + this.bVertical + '; ';		s += 'iScrollingStep=' + this.iScrollingStep + '; ';		s += 'iScrollContainerSize=' + this.iScrollContainerSize + '; ';		s += 'iScrollingItemSize=' + this.iScrollingItemSize + '; ';		s += 'iOffset=' + this.iOffset + '; ';		s += 'iStartPositionOffset =' + this.iStartPositionOffset  + '; ';		s += 'iEndPositionOffset=' + this.iEndPositionOffset + ']';		return s;	}	this.Move = function(iScrollingStep)	{		//alert('Move: ' + this.iOffset + ' + ' + iScrollingStep);		// calcul du déplacement		if (this.iOffset == 0) this.iOffset = - this.iStartPositionOffset ; // premier forward		this.iOffset += iScrollingStep; // cas moyen		if (this.iOffset == this.iStartPositionOffset ) this.iOffset = 0; // dernier back		// déplacement selon axe		if (this.bVertical) {			new Effect.Move(this.oScrollingItem, { x: 0, y: iScrollingStep, mode: 'relative', duration: this.iDuration });			//this.oScrollingItem.setStyle({top: this.iOffset+'px'});		}		else {			new Effect.Move(this.oScrollingItem, { x: iScrollingStep, y: 0, mode: 'relative', duration: this.iDuration });			//this.oScrollingItem.setStyle({left: this.iOffset+'px'});		}	}	this.GoForward = function()	{		//alert('debug : ' + this.ToString());		// alert('GoForward: ' + this.iScrollingItemSize + ' + ' + this.iOffset + ' > ' + this.iScrollContainerSize  - this.iEndPositionOffset);		var btSuivantAv = document.getElementById('bt_suivant');		var btPrecedentAv = document.getElementById('bt_precedent');		if (this.bActionable && this.iScrollingItemSize + this.iOffset > this.iScrollContainerSize + this.iEndPositionOffset) {			this.SetActive(false);			this.Move(- this.iScrollingStep);			setTimeout(function() { oThis.SetActive(true); }, this.iDuration*1000);			if (this.iScrollingItemSize + this.iOffset < this.iScrollContainerSize + this.iEndPositionOffset) {				btSuivantAv.style.display = 'none';			} 					}		btPrecedentAv.style.display = '';	}	this.GoBack = function()	{		//alert(this.iOffset + ' < -' + this.iStartPositionOffset );		var btSuivant = document.getElementById('bt_suivant');		var btPrecedent = document.getElementById('bt_precedent');		if (this.bActionable && this.iOffset < - this.iStartPositionOffset ) {			this.SetActive(false);			this.Move(this.iScrollingStep);			setTimeout(function() { oThis.SetActive(true); }, this.iDuration*1000);			if (this.iOffset == - this.iStartPositionOffset) {				btPrecedent.style.display = 'none';			}		}		btSuivant.style.display = '';	}		this.SetActive = function(actif) {		this.bActionable = actif;	}}//--></script>		<!--<script type="text/javascript" src="http://www.univ-nantes.fr/kosmos/agenda/js/scriptaculous/scriptaculous.js"></script>-->		<script type="text/javascript"  style="display:none"><!--// script.aculo.us effects.js v1.8.3, Thu Oct 08 11:23:33 +0200 2009// Copyright (c) 2005-2009 Thomas Fuchs (http://script.aculo.us, http://mir.aculo.us)// Contributors://  Justin Palmer (http://encytemedia.com/)//  Mark Pilgrim (http://diveintomark.org/)//  Martin Bialasinki//// script.aculo.us is freely distributable under the terms of an MIT-style license.// For details, see the script.aculo.us web site: http://script.aculo.us/// converts rgb() and #xxx to #xxxxxx format,// returns self (or first argument) if not convertableString.prototype.parseColor = function() {  var color = '#';  if (this.slice(0,4) == 'rgb(') {    var cols = this.slice(4,this.length-1).split(',');    var i=0; do { color += parseInt(cols[i]).toColorPart() } while (++i<3);  } else {    if (this.slice(0,1) == '#') {      if (this.length==4) for(var i=1;i<4;i++) color += (this.charAt(i) + this.charAt(i)).toLowerCase();      if (this.length==7) color = this.toLowerCase();    }  }  return (color.length==7 ? color : (arguments[0] || this));};/*--------------------------------------------------------------------------*/Element.collectTextNodes = function(element) {  return $A($(element).childNodes).collect( function(node) {    return (node.nodeType==3 ? node.nodeValue :      (node.hasChildNodes() ? Element.collectTextNodes(node) : ''));  }).flatten().join('');};Element.collectTextNodesIgnoreClass = function(element, className) {  return $A($(element).childNodes).collect( function(node) {    return (node.nodeType==3 ? node.nodeValue :      ((node.hasChildNodes() && !Element.hasClassName(node,className)) ?        Element.collectTextNodesIgnoreClass(node, className) : ''));  }).flatten().join('');};Element.setContentZoom = function(element, percent) {  element = $(element);  element.setStyle({fontSize: (percent/100) + 'em'});  if (Prototype.Browser.WebKit) window.scrollBy(0,0);  return element;};Element.getInlineOpacity = function(element){  return $(element).style.opacity || '';};Element.forceRerendering = function(element) {  try {    element = $(element);    var n = document.createTextNode(' ');    element.appendChild(n);    element.removeChild(n);  } catch(e) { }};/*--------------------------------------------------------------------------*/var Effect = {  _elementDoesNotExistError: {    name: 'ElementDoesNotExistError',    message: 'The specified DOM element does not exist, but is required for this effect to operate'  },  Transitions: {    linear: Prototype.K,    sinoidal: function(pos) {      return (-Math.cos(pos*Math.PI)/2) + .5;    },    reverse: function(pos) {      return 1-pos;    },    flicker: function(pos) {      var pos = ((-Math.cos(pos*Math.PI)/4) + .75) + Math.random()/4;      return pos > 1 ? 1 : pos;    },    wobble: function(pos) {      return (-Math.cos(pos*Math.PI*(9*pos))/2) + .5;    },    pulse: function(pos, pulses) {      return (-Math.cos((pos*((pulses||5)-.5)*2)*Math.PI)/2) + .5;    },    spring: function(pos) {      return 1 - (Math.cos(pos * 4.5 * Math.PI) * Math.exp(-pos * 6));    },    none: function(pos) {      return 0;    },    full: function(pos) {      return 1;    }  },  DefaultOptions: {    duration:   1.0,   // seconds    fps:        100,   // 100= assume 66fps max.    sync:       false, // true for combining    from:       0.0,    to:         1.0,    delay:      0.0,    queue:      'parallel'  },  tagifyText: function(element) {    var tagifyStyle = 'position:relative';    if (Prototype.Browser.IE) tagifyStyle += ';zoom:1';    element = $(element);    $A(element.childNodes).each( function(child) {      if (child.nodeType==3) {        child.nodeValue.toArray().each( function(character) {          element.insertBefore(            new Element('span', {style: tagifyStyle}).update(              character == ' ' ? String.fromCharCode(160) : character),              child);        });        Element.remove(child);      }    });  },  multiple: function(element, effect) {    var elements;    if (((typeof element == 'object') ||        Object.isFunction(element)) &&       (element.length))      elements = element;    else      elements = $(element).childNodes;    var options = Object.extend({      speed: 0.1,      delay: 0.0    }, arguments[2] || { });    var masterDelay = options.delay;    $A(elements).each( function(element, index) {      new effect(element, Object.extend(options, { delay: index * options.speed + masterDelay }));    });  },  PAIRS: {    'slide':  ['SlideDown','SlideUp'],    'blind':  ['BlindDown','BlindUp'],    'appear': ['Appear','Fade']  },  toggle: function(element, effect, options) {    element = $(element);    effect  = (effect || 'appear').toLowerCase();        return Effect[ Effect.PAIRS[ effect ][ element.visible() ? 1 : 0 ] ](element, Object.extend({      queue: { position:'end', scope:(element.id || 'global'), limit: 1 }    }, options || {}));  }};Effect.DefaultOptions.transition = Effect.Transitions.sinoidal;/* ------------- core effects ------------- */Effect.ScopedQueue = Class.create(Enumerable, {  initialize: function() {    this.effects  = [];    this.interval = null;  },  _each: function(iterator) {    this.effects._each(iterator);  },  add: function(effect) {    var timestamp = new Date().getTime();    var position = Object.isString(effect.options.queue) ?      effect.options.queue : effect.options.queue.position;    switch(position) {      case 'front':        // move unstarted effects after this effect        this.effects.findAll(function(e){ return e.state=='idle' }).each( function(e) {            e.startOn  += effect.finishOn;            e.finishOn += effect.finishOn;          });        break;      case 'with-last':        timestamp = this.effects.pluck('startOn').max() || timestamp;        break;      case 'end':        // start effect after last queued effect has finished        timestamp = this.effects.pluck('finishOn').max() || timestamp;        break;    }    effect.startOn  += timestamp;    effect.finishOn += timestamp;    if (!effect.options.queue.limit || (this.effects.length < effect.options.queue.limit))      this.effects.push(effect);    if (!this.interval)      this.interval = setInterval(this.loop.bind(this), 15);  },  remove: function(effect) {    this.effects = this.effects.reject(function(e) { return e==effect });    if (this.effects.length == 0) {      clearInterval(this.interval);      this.interval = null;    }  },  loop: function() {    var timePos = new Date().getTime();    for(var i=0, len=this.effects.length;i<len;i++)      this.effects[i] && this.effects[i].loop(timePos);  }});Effect.Queues = {  instances: $H(),  get: function(queueName) {    if (!Object.isString(queueName)) return queueName;    return this.instances.get(queueName) ||      this.instances.set(queueName, new Effect.ScopedQueue());  }};Effect.Queue = Effect.Queues.get('global');Effect.Base = Class.create({  position: null,  start: function(options) {    if (options && options.transition === false) options.transition = Effect.Transitions.linear;    this.options      = Object.extend(Object.extend({ },Effect.DefaultOptions), options || { });    this.currentFrame = 0;    this.state        = 'idle';    this.startOn      = this.options.delay*1000;    this.finishOn     = this.startOn+(this.options.duration*1000);    this.fromToDelta  = this.options.to-this.options.from;    this.totalTime    = this.finishOn-this.startOn;    this.totalFrames  = this.options.fps*this.options.duration;    this.render = (function() {      function dispatch(effect, eventName) {        if (effect.options[eventName + 'Internal'])          effect.options[eventName + 'Internal'](effect);        if (effect.options[eventName])          effect.options[eventName](effect);      }      return function(pos) {        if (this.state === "idle") {          this.state = "running";          dispatch(this, 'beforeSetup');          if (this.setup) this.setup();          dispatch(this, 'afterSetup');        }        if (this.state === "running") {          pos = (this.options.transition(pos) * this.fromToDelta) + this.options.from;          this.position = pos;          dispatch(this, 'beforeUpdate');          if (this.update) this.update(pos);          dispatch(this, 'afterUpdate');        }      };    })();    this.event('beforeStart');    if (!this.options.sync)      Effect.Queues.get(Object.isString(this.options.queue) ?        'global' : this.options.queue.scope).add(this);  },  loop: function(timePos) {    if (timePos >= this.startOn) {      if (timePos >= this.finishOn) {        this.render(1.0);        this.cancel();        this.event('beforeFinish');        if (this.finish) this.finish();        this.event('afterFinish');        return;      }      var pos   = (timePos - this.startOn) / this.totalTime,          frame = (pos * this.totalFrames).round();      if (frame > this.currentFrame) {        this.render(pos);        this.currentFrame = frame;      }    }  },  cancel: function() {    if (!this.options.sync)      Effect.Queues.get(Object.isString(this.options.queue) ?        'global' : this.options.queue.scope).remove(this);    this.state = 'finished';  },  event: function(eventName) {    if (this.options[eventName + 'Internal']) this.options[eventName + 'Internal'](this);    if (this.options[eventName]) this.options[eventName](this);  },  inspect: function() {    var data = $H();    for(property in this)      if (!Object.isFunction(this[property])) data.set(property, this[property]);    return '#<Effect:' + data.inspect() + ',options:' + $H(this.options).inspect() + '>';  }});Effect.Parallel = Class.create(Effect.Base, {  initialize: function(effects) {    this.effects = effects || [];    this.start(arguments[1]);  },  update: function(position) {    this.effects.invoke('render', position);  },  finish: function(position) {    this.effects.each( function(effect) {      effect.render(1.0);      effect.cancel();      effect.event('beforeFinish');      if (effect.finish) effect.finish(position);      effect.event('afterFinish');    });  }});Effect.Tween = Class.create(Effect.Base, {  initialize: function(object, from, to) {    object = Object.isString(object) ? $(object) : object;    var args = $A(arguments), method = args.last(),      options = args.length == 5 ? args[3] : null;    this.method = Object.isFunction(method) ? method.bind(object) :      Object.isFunction(object[method]) ? object[method].bind(object) :      function(value) { object[method] = value };    this.start(Object.extend({ from: from, to: to }, options || { }));  },  update: function(position) {    this.method(position);  }});Effect.Event = Class.create(Effect.Base, {  initialize: function() {    this.start(Object.extend({ duration: 0 }, arguments[0] || { }));  },  update: Prototype.emptyFunction});Effect.Opacity = Class.create(Effect.Base, {  initialize: function(element) {    this.element = $(element);    if (!this.element) throw(Effect._elementDoesNotExistError);    // make this work on IE on elements without 'layout'    if (Prototype.Browser.IE && (!this.element.currentStyle.hasLayout))      this.element.setStyle({zoom: 1});    var options = Object.extend({      from: this.element.getOpacity() || 0.0,      to:   1.0    }, arguments[1] || { });    this.start(options);  },  update: function(position) {    this.element.setOpacity(position);  }});Effect.Move = Class.create(Effect.Base, {  initialize: function(element) {    this.element = $(element);    if (!this.element) throw(Effect._elementDoesNotExistError);    var options = Object.extend({      x:    0,      y:    0,      mode: 'relative'    }, arguments[1] || { });    this.start(options);  },  setup: function() {    this.element.makePositioned();    this.originalLeft = parseFloat(this.element.getStyle('left') || '0');    this.originalTop  = parseFloat(this.element.getStyle('top')  || '0');    if (this.optio</effect== 'absolute') {      this.options.x = this.options.x - this.originalLeft;      this.options.y = this.options.y - this.originalTop;    }  },  update: function(position) {    this.element.setStyle({      left: (this.options.x  * position + this.originalLeft).round() + 'px',      top:  (this.options.y  * position + this.originalTop).round()  + 'px'    });  }});// for backwards compatibilityEffect.MoveBy = function(element, toTop, toLeft) {  return new Effect.Move(element,    Object.extend({ x: toLeft, y: toTop }, arguments[3] || { }));};Effect.Scale = Class.create(Effect.Base, {  initialize: function(element, percent) {    this.element = $(element);    if (!this.element) throw(Effect._elementDoesNotExistError);    var options = Object.extend({      scaleX: true,      scaleY: true,      scaleContent: true,      scaleFromCenter: false,      scaleMode: 'box',        // 'box' or 'contents' or { } with provided values      scaleFrom: 100.0,      scaleTo:   percent    }, arguments[2] || { });    this.start(options);  },  setup: function() {    this.restoreAfterFinish = this.options.restoreAfterFinish || false;    this.elementPositioning = this.element.getStyle('position');    this.originalStyle = { };    ['top','left','width','height','fontSize'].each( function(k) {      this.originalStyle[k] = this.element.style[k];    }.bind(this));    this.originalTop  = this.element.offsetTop;    this.originalLeft = this.element.offsetLeft;    var fontSize = this.element.getStyle('font-size') || '100%';    ['em','px','%','pt'].each( function(fontSizeType) {      if (fontSize.indexOf(fontSizeType)>0) {        this.fontSize     = parseFloat(fontSize);        this.fontSizeType = fontSizeType;      }    }.bind(this));    this.factor = (this.options.scaleTo - this.options.scaleFrom)/100;    this.dims = null;    if (this.options.scaleMode=='box')      this.dims = [this.element.offsetHeight, this.element.offsetWidth];    if (/^content/.test(this.options.scaleMode))      this.dims = [this.element.scrollHeight, this.element.scrollWidth];    if (!this.dims)      this.dims = [this.options.scaleMode.originalHeight,                   this.options.scaleMode.originalWidth];  },  update: function(position) {    var currentScale = (this.options.scaleFrom/100.0) + (this.factor * position);    if (this.options.scaleContent && this.fontSize)      this.element.setStyle({fontSize: this.fontSize * currentScale + this.fontSizeType });    this.setDimensions(this.dims[0] * currentScale, this.dims[1] * currentScale);  },  finish: function(position) {    if (this.restoreAfterFinish) this.element.setStyle(this.originalStyle);  },  setDimensions: function(height, width) {    var d = { };    if (this.options.scaleX) d.width = width.round() + 'px';    if (this.options.scaleY) d.height = height.round() + 'px';    if (this.options.scaleFromCenter) {      var topd  = (height - this.dims[0])/2;      var leftd = (width  - this.dims[1])/2;      if (this.elementPositioning == 'absolute') {        if (this.options.scaleY) d.top = this.originalTop-topd + 'px';        if (this.options.scaleX) d.left = this.originalLeft-leftd + 'px';      } else {        if (this.options.scaleY) d.top = -topd + 'px';        if (this.options.scaleX) d.left = -leftd + 'px';      }    }    this.element.setStyle(d);  }});Effect.Highlight = Class.create(Effect.Base, {  initialize: function(element) {    this.element = $(element);    if (!this.element) throw(Effect._elementDoesNotExistError);    var options = Object.extend({ startcolor: '#ffff99' }, arguments[1] || { });    this.start(options);  },  setup: function() {    // Prevent executing on elements not in the layout flow    if (this.element.getStyle('display')=='none') { this.cancel(); return; }    // Disable background image during the effect    this.oldStyle = { };    if (!this.options.keepBackgroundImage) {      this.oldStyle.backgroundImage = this.element.getStyle('background-image');      this.element.setStyle({backgroundImage: 'none'});    }    if (!this.options.endcolor)      this.options.endcolor = this.element.getStyle('background-color').parseColor('#ffffff');    if (!this.options.restorecolor)      this.options.restorecolor = this.element.getStyle('background-color');    // init color calculations    this._base  = $R(0,2).map(function(i){ return parseInt(this.options.startcolor.slice(i*2+1,i*2+3),16) }.bind(this));    this._delta = $R(0,2).map(function(i){ return parseInt(this.options.endcolor.slice(i*2+1,i*2+3),16)-this._base[i] }.bind(this));  },  update: function(position) {    this.element.setStyle({backgroundColor: $R(0,2).inject('#',function(m,v,i){      return m+((this._base[i]+(this._delta[i]*position)).round().toColorPart()); }.bind(this)) });  },  finish: function() {    this.element.setStyle(Object.extend(this.oldStyle, {      backgroundColor: this.options.restorecolor    }));  }});Effect.ScrollTo = function(element) {  var options = arguments[1] || { },  scrollOffsets = document.viewport.getScrollOffsets(),  elementOffsets = $(element).cumulativeOffset();  if (options.offset) elementOffsets[1] += options.offset;  return new Effect.Tween(null,    scrollOffsets.top,    elementOffsets[1],    options,    function(p){ scrollTo(scrollOffsets.left, p.round()); }  );};/* ------------- combination effects ------------- */Effect.Fade = function(element) {  element = $(element);  var oldOpacity = element.getInlineOpacity();  var options = Object.extend({    from: element.getOpacity() || 1.0,    to:   0.0,    afterFinishInternal: function(effect) {      if (effect.options.to!=0) return;      effect.element.hide().setStyle({opacity: oldOpacity});    }  }, arguments[1] || { });  return new Effect.Opacity(element,options);};Effect.Appear = function(element) {  element = $(element);  var options = Object.extend({  from: (element.getStyle('display') == 'none' ? 0.0 : element.getOpacity() || 0.0),  to:   1.0,  // force Safari to render floated elements properly  afterFinishInternal: function(effect) {    effect.element.forceRerendering();  },  beforeSetup: function(effect) {    effect.element.setOpacity(effect.options.from).show();  }}, arguments[1] || { });  return new Effect.Opacity(element,options);};Effect.Puff = function(element) {  element = $(element);  var oldStyle = {    opacity: element.getInlineOpacity(),    position: element.getStyle('position'),    top:  element.style.top,    left: element.style.left,    width: element.style.width,    height: element.style.height  };  return new Effect.Parallel(   [ new Effect.Scale(element, 200,      { sync: true, scaleFromCenter: true, scaleContent: true, restoreAfterFinish: true }),     new Effect.Opacity(element, { sync: true, to: 0.0 } ) ],     Object.extend({ duration: 1.0,      beforeSetupInternal: function(effect) {        Position.absolutize(effect.effects[0].element);      },      afterFinishInternal: function(effect) {         effect.effects[0].element.hide().setStyle(oldStyle); }     }, arguments[1] || { })   );};Effect.BlindUp = function(element) {  element = $(element);  element.makeClipping();  return new Effect.Scale(element, 0,    Object.extend({ scaleContent: false,      scaleX: false,      restoreAfterFinish: true,      afterFinishInternal: function(effect) {        effect.element.hide().undoClipping();      }    }, arguments[1] || { })  );};Effect.BlindDown = function(element) {  element = $(element);  var elementDimensions = element.getDimensions();  return new Effect.Scale(element, 100, Object.extend({    scaleContent: false,    scaleX: false,    scaleFrom: 0,    scaleMode: {originalHeight: elementDimensions.height, originalWidth: elementDimensions.width},    restoreAfterFinish: true,    afterSetup: function(effect) {      effect.element.makeClipping().setStyle({height: '0px'}).show();    },    afterFinishInternal: function(effect) {      effect.element.undoClipping();    }  }, arguments[1] || { }));};Effect.SwitchOff = function(element) {  element = $(element);  var oldOpacity = element.getInlineOpacity();  return new Effect.Appear(element, Object.extend({    duration: 0.4,    from: 0,    transition: Effect.Transitions.flicker,    afterFinishInternal: function(effect) {      new Effect.Scale(effect.element, 1, {        duration: 0.3, scaleFromCenter: true,        scaleX: false, scaleContent: false, restoreAfterFinish: true,        beforeSetup: function(effect) {          effect.element.makePositioned().makeClipping();        },        afterFinishInternal: function(effect) {          effect.element.hide().undoClipping().undoPositioned().setStyle({opacity: oldOpacity});        }      });    }  }, arguments[1] || { }));};Effect.DropOut = function(element) {  element = $(element);  var oldStyle = {    top: element.getStyle('top'),    left: element.getStyle('left'),    opacity: element.getInlineOpacity() };  return new Effect.Parallel(    [ new Effect.Move(element, {x: 0, y: 100, sync: true }),      new Effect.Opacity(element, { sync: true, to: 0.0 }) ],    Object.extend(      { duration: 0.5,        beforeSetup: function(effect) {          effect.effects[0].element.makePositioned();        },        afterFinishInternal: function(effect) {          effect.effects[0].element.hide().undoPositioned().setStyle(oldStyle);        }      }, arguments[1] || { }));};Effect.Shake = function(element) {  element = $(element);  var options = Object.extend({    distance: 20,    duration: 0.5  }, arguments[1] || {});  var distance = parseFloat(options.distance);  var split = parseFloat(options.duration) / 10.0;  var oldStyle = {    top: element.getStyle('top'),    left: element.getStyle('left') };    return new Effect.Move(element,      { x:  distance, y: 0, duration: split, afterFinishInternal: function(effect) {    new Effect.Move(effect.element,      { x: -distance*2, y: 0, duration: split*2,  afterFinishInternal: function(effect) {    new Effect.Move(effect.element,      { x:  distance*2, y: 0, duration: split*2,  afterFinishInternal: function(effect) {    new Effect.Move(effect.element,      { x: -distance*2, y: 0, duration: split*2,  afterFinishInternal: function(effect) {    new Effect.Move(effect.element,      { x:  distance*2, y: 0, duration: split*2,  afterFinishInternal: function(effect) {    new Effect.Move(effect.element,      { x: -distance, y: 0, duration: split, afterFinishInternal: function(effect) {        effect.element.undoPositioned().setStyle(oldStyle);  }}); }}); }}); }}); }}); }});};Effect.SlideDown = function(element) {	  element = $(element).cleanWhitespace();  // SlideDown need to have the content of the element wrapped in a container element with fixed height!  var oldInnerBottom = element.down().getStyle('bottom');  var elementDimensions = element.getDimensions();  return new Effect.Scale(element, 100, Object.extend({    scaleContent: false,    scaleX: false,    scaleFrom: window.opera ? 0 : 1,    scaleMode: {originalHeight: elementDimensions.height, originalWidth: elementDimensions.width},    restoreAfterFinish: true,    afterSetup: function(effect) {      effect.element.makePositioned();      effect.element.down().makePositioned();      if (window.opera) effect.element.setStyle({top: ''});      effect.element.makeClipping().setStyle({height: '37px'}).show();    },    afterUpdateInternal: function(effect) {      effect.element.down().setStyle({bottom:        (effect.dims[0] - effect.element.clientHeight) + 'px' });    },    afterFinishInternal: function(effect) {      effect.element.undoClipping().undoPositioned();      effect.element.down().undoPositioned().setStyle({bottom: oldInnerBottom}); }    }, arguments[1] || { })  );};Effect.SlideUp = function(element) {  element = $(element).cleanWhitespace();  var oldInnerBottom = element.down().getStyle('bottom');  var elementDimensions = element.getDimensions();  return new Effect.Scale(element, window.opera ? 0 : 1,   Object.extend({ scaleContent: false,    scaleX: false,    scaleMode: 'box',    scaleFrom: 100,    scaleMode: {originalHeight: elementDimensions.height, originalWidth: elementDimensions.width},    restoreAfterFinish: true,    afterSetup: function(effect) {      effect.element.makePositioned();      effect.element.down().makePositioned();      if (window.opera) effect.element.setStyle({top: ''});      effect.element.makeClipping().show();    },    afterUpdateInternal: function(effect) {      effect.element.down().setStyle({bottom:        (effect.dims[0] - effect.element.clientHeight) + 'px' });    },    afterFinishInternal: function(effect) {      effect.element.hide().undoClipping().undoPositioned();      effect.element.down().undoPositioned().setStyle({bottom: oldInnerBottom});    }   }, arguments[1] || { })  );};// Bug in opera makes the TD containing this element expand for a instance after finishEffect.Squish = function(element) {  return new Effect.Scale(element, window.opera ? 1 : 0, {    restoreAfterFinish: true,    beforeSetup: function(effect) {      effect.element.makeClipping();    },    afterFinishInternal: function(effect) {      effect.element.hide().undoClipping();    }  });};Effect.Grow = function(element) {  element = $(element);  var options = Object.extend({    direction: 'center',    moveTransition: Effect.Transitions.sinoidal,    scaleTransition: Effect.Transitions.sinoidal,    opacityTransition: Effect.Transitions.full  }, arguments[1] || { });  var oldStyle = {    top: element.style.top,    left: element.style.left,    height: element.style.height,    width: element.style.width,    opacity: element.getInlineOpacity() };  var dims = element.getDimensions();  var initialMoveX, initialMoveY;  var moveX, moveY;  switch (options.direction) {    case 'top-left':      initialMoveX = initialMoveY = moveX = moveY = 0;      break;    case 'top-right':      initialMoveX = dims.width;      initialMoveY = moveY = 0;      moveX = -dims.width;      break;    case 'bottom-left':      initialMoveX = moveX = 0;      initialMoveY = dims.height;      moveY = -dims.height;      break;    case 'bottom-right':      initialMoveX = dims.width;      initialMoveY = dims.height;      moveX = -dims.width;      moveY = -dims.height;      break;    case 'center':      initialMoveX = dims.width / 2;      initialMoveY = dims.height / 2;      moveX = -dims.width / 2;      moveY = -dims.height / 2;      break;  }  return new Effect.Move(element, {    x: initialMoveX,    y: initialMoveY,    duration: 0.01,    beforeSetup: function(effect) {      effect.element.hide().makeClipping().makePositioned();    },    afterFinishInternal: function(effect) {      new Effect.Parallel(        [ new Effect.Opacity(effect.element, { sync: true, to: 1.0, from: 0.0, transition: options.opacityTransition }),          new Effect.Move(effect.element, { x: moveX, y: moveY, sync: true, transition: options.moveTransition }),          new Effect.Scale(effect.element, 100, {            scaleMode: { originalHeight: dims.height, originalWidth: dims.width },            sync: true, scaleFrom: window.opera ? 1 : 0, transition: options.scaleTransition, restoreAfterFinish: true})        ], Object.extend({             beforeSetup: function(effect) {               effect.effects[0].element.setStyle({height: '0px'}).show();             },             afterFinishInternal: function(effect) {               effect.effects[0].element.undoClipping().undoPositioned().setStyle(oldStyle);             }           }, options)      );    }  });};Effect.Shrink = function(element) {  element = $(element);  var options = Object.extend({    direction: 'center',    moveTransition: Effect.Transitions.sinoidal,    scaleTransition: Effect.Transitions.sinoidal,    opacityTransition: Effect.Transitions.none  }, arguments[1] || { });  var oldStyle = {    top: element.style.top,    left: element.style.left,    height: element.style.height,    width: element.style.width,    opacity: element.getInlineOpacity() };  var dims = element.getDimensions();  var moveX, moveY;  switch (options.direction) {    case 'top-left':      moveX = moveY = 0;      break;    case 'top-right':      moveX = dims.width;      moveY = 0;      break;    case 'bottom-left':      moveX = 0;      moveY = dims.height;      break;    case 'bottom-right':      moveX = dims.width;      moveY = dims.height;      break;    case 'center':      moveX = dims.width / 2;      moveY = dims.height / 2;      break;  }  return new Effect.Parallel(    [ new Effect.Opacity(element, { sync: true, to: 0.0, from: 1.0, transition: options.opacityTransition }),      new Effect.Scale(element, window.opera ? 1 : 0, { sync: true, transition: options.scaleTransition, restoreAfterFinish: true}),      new Effect.Move(element, { x: moveX, y: moveY, sync: true, transition: options.moveTransition })    ], Object.extend({         beforeStartInternal: function(effect) {           effect.effects[0].element.makePositioned().makeClipping();         },         afterFinishInternal: function(effect) {           effect.effects[0].element.hide().undoClipping().undoPositioned().setStyle(oldStyle); }       }, options)  );};Effect.Pulsate = function(element) {  element = $(element);  var options    = arguments[1] || { },    oldOpacity = element.getInlineOpacity(),    transition = options.transition || Effect.Transitions.linear,    reverser   = function(pos){      return 1 - transition((-Math.cos((pos*(options.pulses||5)*2)*Math.PI)/2) + .5);    };  return new Effect.Opacity(element,    Object.extend(Object.extend({  duration: 2.0, from: 0,      afterFinishInternal: function(effect) { effect.element.setStyle({opacity: oldOpacity}); }    }, options), {transition: reverser}));};Effect.Fold = function(element) {  element = $(element);  var oldStyle = {    top: element.style.top,    left: element.style.left,    width: element.style.width,    height: element.style.height };  element.makeClipping();  return new Effect.Scale(element, 5, Object.extend({    scaleContent: false,    scaleX: false,    afterFinishInternal: function(effect) {    new Effect.Scale(element, 1, {      scaleContent: false,      scaleY: false,      afterFinishInternal: function(effect) {        effect.element.hide().undoClipping().setStyle(oldStyle);      } });  }}, arguments[1] || { }));};Effect.Morph = Class.create(Effect.Base, {  initialize: function(element) {    this.element = $(element);    if (!this.element) throw(Effect._elementDoesNotExistError);    var options = Object.extend({      style: { }    }, arguments[1] || { });    if (!Object.isString(options.style)) this.style = $H(options.style);    else {      if (options.style.include(':'))        this.style = options.style.parseStyle();      else {        this.element.addClassName(options.style);        this.style = $H(this.element.getStyles());        this.element.removeClassName(options.style);        var css = this.element.getStyles();        this.style = this.style.reject(function(style) {          return style.value == css[style.key];        });        options.afterFinishInternal = function(effect) {          effect.element.addClassName(effect.options.style);          effect.transforms.each(function(transform) {            effect.element.style[transform.style] = '';          });        };      }    }    this.start(options);  },  setup: function(){    function parseColor(color){      if (!color || ['rgba(0, 0, 0, 0)','transparent'].include(color)) color = '#ffffff';      color = color.parseColor();      return $R(0,2).map(function(i){        return parseInt( color.slice(i*2+1,i*2+3), 16 );      });    }    this.transforms = this.style.map(function(pair){      var property = pair[0], value = pair[1], unit = null;      if (value.parseColor('#zzzzzz') != '#zzzzzz') {        value = value.parseColor();        unit  = 'color';      } else if (property == 'opacity') {        value = parseFloat(value);        if (Prototype.Browser.IE && (!this.element.currentStyle.hasLayout))          this.element.setStyle({zoom: 1});      } else if (Element.CSS_LENGTH.test(value)) {          var components = value.match(/^([\+\-]?[0-9\.]+)(.*)$/);          value = parseFloat(components[1]);          unit = (components.length == 3) ? components[2] : null;      }      var originalValue = this.element.getStyle(property);      return {        style: property.camelize(),        originalValue: unit=='color' ? parseColor(originalValue) : parseFloat(originalValue || 0),        targetValue: unit=='color' ? parseColor(value) : value,        unit: unit      };    }.bind(this)).reject(function(transform){      return (        (transform.originalValue == transform.targetValue) ||        (          transform.unit != 'color' &&          (isNaN(transform.originalValue) || isNaN(transform.targetValue))        )      );    });  },  update: function(position) {    var style = { }, transform, i = this.transforms.length;    while(i--)      style[(transform = this.transforms[i]).style] =        transform.unit=='color' ? '#'+          (Math.round(transform.originalValue[0]+            (transform.targetValue[0]-transform.originalValue[0])*position)).toColorPart() +          (Math.round(transform.originalValue[1]+            (transform.targetValue[1]-transform.originalValue[1])*position)).toColorPart() +          (Math.round(transform.originalValue[2]+            (transform.targetValue[2]-transform.originalValue[2])*position)).toColorPart() :        (transform.originalValue +          (transform.targetValue - transform.originalValue) * position).toFixed(3) +            (transform.unit === null ? '' : transform.unit);    this.element.setStyle(style, true);  }});Effect.Transform = Class.create({  initialize: function(tracks){    this.tracks  = [];    this.options = arguments[1] || { };    this.addTracks(tracks);  },  addTracks: function(tracks){    tracks.each(function(track){      track = $H(track);      var data = track.values().first();      this.tracks.push($H({        ids:     track.keys().first(),        effect:  Effect.Morph,        options: { style: data }      }));    }.bind(this));    return this;  },  play: function(){    return new Effect.Parallel(      this.tracks.map(function(track){        var ids = track.get('ids'), effect = track.get('effect'), options = track.get('options');        var elements = [$(ids) || $$(ids)].flatten();        return elements.map(function(e){ return new effect(e, Object.extend({ sync:true }, options)) });      }).flatten(),      this.options    );  }});Element.CSS_PROPERTIES = $w(  'backgroundColor backgroundPosition borderBottomColor borderBottomStyle ' +  'borderBottomWidth borderLeftColor borderLeftStyle borderLeftWidth ' +  'borderRightColor borderRightStyle borderRightWidth borderSpacing ' +  'borderTopColor borderTopStyle borderTopWidth bottom clip color ' +  'fontSize fontWeight height left letterSpacing lineHeight ' +  'marginBottom marginLeft marginRight marginTop markerOffset maxHeight '+  'maxWidth minHeight minWidth opacity outlineColor outlineOffset ' +  'outlineWidth paddingBottom paddingLeft paddingRight paddingTop ' +  'right textIndent top width wordSpacing zIndex');Element.CSS_LENGTH = /^(([\+\-]?[0-9\.]+)(em|ex|px|in|cm|mm|pt|pc|\%))|0$/;String.__parseStyleElement = document.createElement('div');String.prototype.parseStyle = function(){  var style, styleRules = $H();  if (Prototype.Browser.WebKit)    style = new Element('div',{style:this}).style;  else {    String.__parseStyleElement.innerHTML = '<div style="' + this + '"></div>';    style = String.__parseStyleElement.childNodes[0].style;  }  Element.CSS_PROPERTIES.each(function(property){    if (style[property]) styleRules.set(property, style[property]);  });  if (Prototype.Browser.IE && this.include('opacity'))    styleRules.set('opacity', this.match(/opacity:\s*((?:0|1)?(?:\.\d*)?)/)[1]);  return styleRules;};if (document.defaultView && document.defaultView.getComputedStyle) {  Element.getStyles = function(element) {    var css = document.defaultView.getComputedStyle($(element), null);    return Element.CSS_PROPERTIES.inject({ }, function(styles, property) {      styles[property] = css[property];      return styles;    });  };} else {  Element.getStyles = function(element) {    element = $(element);    var css = element.currentStyle, styles;    styles = Element.CSS_PROPERTIES.inject({ }, function(results, property) {      results[property] = css[property];      return results;    });    if (!styles.opacity) styles.opacity = element.getOpacity();    return styles;  };}Effect.Methods = {  morph: function(element, style) {    element = $(element);    new Effect.Morph(element, Object.extend({ style: style }, arguments[2] || { }));    return element;  },  visualEffect: function(element, effect, options) {    element = $(element);    var s = effect.dasherize().camelize(), klass = s.charAt(0).toUpperCase() + s.substring(1);    new Effect[klass](element, options);    return element;  },  highlight: function(element, options) {    element = $(element);    new Effect.Highlight(element, options);    return element;  }};$w('fade appear grow shrink fold blindUp blindDown slideUp slideDown '+  'pulsate shake puff squish switchOff dropOut').each(  function(effect) {    Effect.Methods[effect] = function(element, options){      element = $(element);      Effect[effect.charAt(0).toUpperCase() + effect.substring(1)](element, options);      return element;    };  });$w('getInlineOpacity forceRerendering setContentZoom collectTextNodes collectTextNodesIgnoreClass getStyles').each(  function(f) { Effect.Methods[f] = Element[f]; });Element.addMethods(Effect.Methods);//--></script>		<script type="text/javascript"  style="display:none"><!--/*	Developed by Robert Nyman, http://www.robertnyman.com	Code/licensing: http://code.google.com/p/getelementsbyclassname/*/	var getElementsByClassName = function (className, tag, elm){	if (document.getElementsByClassName) {		getElementsByClassName = function (className, tag, elm) {			elm = elm || document;			var elements = elm.getElementsByClassName(className),				nodeName = (tag)? new RegExp("\\b" + tag + "\\b", "i") : null,				returnElements = [],				current;			for(var i=0, il=elements.length; i<il; i+=1){				current = elements[i];				if(!nodeName || nodeName.test(current.nodeName)) {					returnElements.push(current);				}			}			return returnElements;		};	}	else if (document.evaluate) {		getElementsByClassName = function (className, tag, elm) {			tag = tag || "*";			elm = elm || document;			var classes = className.split(" "),				classesToCheck = "",				xhtmlNamespace = "http://www.w3.org/1999/xhtml",				namespaceResolver = (document.documentElement.namespaceURI === xhtmlNamespace)? xhtmlNamespace : null,				returnElements = [],				elements,				node;			for(var j=0, jl=classes.length; j<jl; j+=1){				classesToCheck += "[contains(concat(' ', @class, ' '), ' " + classes[j] + " ')]";			}			try	{				elements = document.evaluate(".//" + tag + classesToCheck, elm, namespaceResolver, 0, null);			}			catch (e) {				elements = document.evaluate(".//" + tag + classesToCheck, elm, null, 0, null);			}			while ((node = elements.iterateNext())) {				returnElements.push(node);			}			return returnElements;		};	}	else {		getElementsByClassName = function (className, tag, elm) {			tag = tag || "*";			elm = elm || document;			var classes = className.split(" "),				classesToCheck = [],				elements = (tag === "*" && elm.all)? elm.all : elm.getElementsByTagName(tag),				current,				returnElements = [],				match;			for(var k=0, kl=classes.length; k<kl; k+=1){				classesToCheck.push(new RegExp("(^|\\s)" + classes[k] + "(\\s|$)"));			}			for(var l=0, ll=elements.length; l<ll; l+=1){				current = elements[l];				match = false;				for(var m=0, ml=classesToCheck.length; m<ml; m+=1){					match = classesToCheck[m].test(current.className);					if (!match) {						break;					}				}				if (match) {					returnElements.push(current);				}			}			return returnElements;		};	}	return getElementsByClassName(className, tag, elm);};function Rafraichir(){	for(var i = 0;i<getElementsByClassName('lien_agenda').length;i++){		if(document.getElementById('input_agrandi').value == 1){			getElementsByClassName('lien_agenda')[i].href += "&AGRANDI=1";		}else{			getElementsByClassName('lien_agenda')[i].href += "&AGRANDI=0";		}		if(document.getElementById('input_rechercheOn').value == 1){			getElementsByClassName('lien_agenda')[i].href += "&RECHERCHE_ON=1";		}else{			getElementsByClassName('lien_agenda')[i].href += "&RECHERCHE_ON=0";		}	}}//--></script>		<link rel="start" title="Accueil" href="http://www.univ-nantes.fr/" />		<link rel="alternate" type="application/rss+xml" title="Fil RSS des dix derni&egrave;res actualit&eacute;s" href="http://www.univ-nantes.fr/rss" />		<script type="text/javascript"  style="display:none"><!--//-------------------------------------------------------------------------// Fonction d'affichage d'une adresse email// param: partie droite, partie gauche de l'adresse email a reconstituer//-------------------------------------------------------------------------function afficheMail(droite,gauche,contenu) {	if(!isDefined(contenu)) {		document.write("<a href=\"" + "mail" + "to:" + gauche + "@" + droite +"\">" + gauche + "@" + droite + "</a><img src=\"/images/protection-14x14.png\" title=\"Cette adresse est prot&eacute;g&eacute;e contre le spam\">");	} else {		document.write("<a href=\"" + "mail" + "to:" + gauche + "@" + droite +"\">" + contenu + "</a><img src=\"/images/protection-14x14.png\" title=\"Cette adresse est prot&eacute;g&eacute;e contre le spam\">");		}}function isDefined(variable) {    return (!(!( variable||false )))}function portlet_showhide(id) {        if(document.getElementById(id).style.display == 'none') {                document.getElementById(id).style.display = 'block';                document.getElementById("label_"+id).innerHTML = 'cacher';        } else {                document.getElementById(id).style.display = 'none';                document.getElementById("label_"+id).innerHTML = 'ajouter &agrave; votre site';        }}//--></script>		<script type="text/javascript"  style="display:none"><!--//***********************************************************************************************************************************///	LyteBox v3.22////	 Author: Markus F. Hay//  Website: http://www.dolem.com/lytebox//	   Date: October 2, 2007//	License: Creative Commons Attribution 3.0 License (http://creativecommons.org/licenses/by/3.0/)// Browsers: Tested successfully on WinXP with the following browsers (using no DOCTYPE and Strict/Transitional/Loose DOCTYPES)://				* Firefox: 2.0.0.7, 1.5.0.12//				* Internet Explorer: 7.0, 6.0 SP2, 5.5 SP2//				* Opera: 9.23//// Releases: For up-to-date and complete release information, visit http://www.dolem.com/forum/showthread.php?tid=62//				* v3.22 (10/02/07)//				* v3.21 (09/30/07)//				* v3.20 (07/12/07)//				* v3.10 (05/28/07)//				* v3.00 (05/15/07)//				* v2.02 (11/13/06)////   Credit: LyteBox was originally derived from the Lightbox class (v2.02) that was written by Lokesh Dhakar. For more//			 information please visit http://huddletogether.com/projects/lightbox2///***********************************************************************************************************************************/Array.prototype.removeDuplicates = function () { for (var i = 1; i < this.length; i++) { if (this[i][0] == this[i-1][0]) { this.splice(i,1); } } }Array.prototype.empty = function () { for (var i = 0; i <= this.length; i++) { this.shift(); } }String.prototype.trim = function () { return this.replace(/^\s+|\s+$/g, ''); }function LyteBox() {	/*** Start Global Configuration ***/		this.theme			= 'grey';	// themes: grey (default), red, green, blue, gold		this.hideFlash			= true;		// controls whether or not Flash objects should be hidden		this.outerBorder		= true;		// controls whether to show the outer grey (or theme) border		this.resizeSpeed		= 8;		// controls the speed of the image resizing (1=slowest and 10=fastest)		this.maxOpacity			= 80;		// higher opacity = darker overlay, lower opacity = lighter overlay		this.navType			= 1;		// 1 = "Prev/Next" buttons on top left and left (default), 2 = "<< prev | next >>" links next to image number		this.autoResize			= true;		// controls whether or not images should be resized if larger than the browser window dimensions		this.doAnimations		= true;		// controls whether or not "animate" Lytebox, i.e. resize transition between images, fade in/out effects, etc.				this.borderSize			= 12;		// if you adjust the padding in the CSS, you will need to update this variable -- otherwise, leave this alone...	/*** End Global Configuration ***/		/*** Configure Slideshow Options ***/		this.slideInterval		= 8000;		// Change value (milliseconds) to increase/decrease the time between "slides" (10000 = 10 seconds)		this.showNavigation		= true;		// true to display Next/Prev buttons/text during slideshow, false to hide		this.showClose			= true;		// true to display the Close button, false to hide		this.showDetails		= true;		// true to display image details (caption, count), false to hide		this.showPlayPause		= true;		// true to display pause/play buttons next to close button, false to hide		this.autoEnd			= true;		// true to automatically close Lytebox after the last image is reached, false to keep open		this.pauseOnNextClick	= false;	// true to pause the slideshow when the "Next" button is clicked        this.pauseOnPrevClick 	= true;		// true to pause the slideshow when the "Prev" button is clicked	/*** End Slideshow Configuration ***/		if(this.resizeSpeed > 10) { this.resizeSpeed = 10; }	if(this.resizeSpeed < 1) { resizeSpeed = 1; }	this.resizeDuration = (11 - this.resizeSpeed) * 0.15;	this.resizeWTimerArray		= new Array();	this.resizeWTimerCount		= 0;	this.resizeHTimerArray		= new Array();	this.resizeHTimerCount		= 0;	this.showContentTimerArray	= new Array();	this.showContentTimerCount	= 0;	this.overlayTimerArray		= new Array();	this.overlayTimerCount		= 0;	this.imageTimerArray		= new Array();	this.imageTimerCount		= 0;	this.timerIDArray			= new Array();	this.timerIDCount			= 0;	this.slideshowIDArray		= new Array();	this.slideshowIDCount		= 0;	this.imageArray	 = new Array();	this.activeImage = null;	this.slideArray	 = new Array();	this.activeSlide = null;	this.frameArray	 = new Array();	this.activeFrame = null;	this.checkFrame();	this.isSlideshow = false;	this.isLyteframe = false;	/*@cc_on		/*@if (@_jscript)			this.ie = (document.all && !window.opera) ? true : false;		/*@else @*/			this.ie = false;		/*@end	@*/	this.ie7 = (this.ie && window.XMLHttpRequest);		this.initialize();}LyteBox.prototype.initialize = function() {	this.updateLyteboxItems();	var objBody = this.doc.getElementsByTagName("body").item(0);		if (this.doc.getElementById('lbOverlay')) {		objBody.removeChild(this.doc.getElementById("lbOverlay"));		objBody.removeChild(this.doc.getElementById("lbMain"));	}	var objOverlay = this.doc.createElement("div");		objOverlay.setAttribute('id','lbOverlay');		objOverlay.setAttribute((this.ie ? 'className' : 'class'), this.theme);		if ((this.ie && !this.ie7) || (this.ie7 && this.doc.compatMode == 'BackCompat')) {			objOverlay.style.position = 'absolute';		}		objOverlay.style.display = 'none';		objBody.appendChild(objOverlay);	var objLytebox = this.doc.createElement("div");		objLytebox.setAttribute('id','lbMain');		objLytebox.style.display = 'none';		objBody.appendChild(objLytebox);	var objOuterContainer = this.doc.createElement("div");		objOuterContainer.setAttribute('id','lbOuterContainer');		objOuterContainer.setAttribute((this.ie ? 'className' : 'class'), this.theme);		objLytebox.appendChild(objOuterContainer);	var objIframeContainer = this.doc.createElement("div");		objIframeContainer.setAttribute('id','lbIframeContainer');		objIframeContainer.style.display = 'none';		objOuterContainer.appendChild(objIframeContainer);	var objIframe = this.doc.createElement("iframe");		objIframe.setAttribute('id','lbIframe');		objIframe.setAttribute('name','lbIframe');		objIframe.style.display = 'none';		objIframeContainer.appendChild(objIframe);	var objImageContainer = this.doc.createElement("div");		objImageContainer.setAttribute('id','lbImageContainer');		objOuterContainer.appendChild(objImageContainer);	var objLyteboxImage = this.doc.createElement("img");		objLyteboxImage.setAttribute('id','lbImage');		objImageContainer.appendChild(objLyteboxImage);	var objLoading = this.doc.createElement("div");		objLoading.setAttribute('id','lbLoading');		objOuterContainer.appendChild(objLoading);	var objDetailsContainer = this.doc.createElement("div");		objDetailsContainer.setAttribute('id','lbDetailsContainer');		objDetailsContainer.setAttribute((this.ie ? 'className' : 'class'), this.theme);		objLytebox.appendChild(objDetailsContainer);	var objDetailsData =this.doc.createElement("div");		objDetailsData.setAttribute('id','lbDetailsData');		objDetailsData.setAttribute((this.ie ? 'className' : 'class'), this.theme);		objDetailsContainer.appendChild(objDetailsData);	var objDetails = this.doc.createElement("div");		objDetails.setAttribute('id','lbDetails');		objDetailsData.appendChild(objDetails);	var objCaption = this.doc.createElement("span");		objCaption.setAttribute('id','lbCaption');		objDetails.appendChild(objCaption);	var objHoverNav = this.doc.createElement("div");		objHoverNav.setAttribute('id','lbHoverNav');		objImageContainer.appendChild(objHoverNav);	var objBottomNav = this.doc.createElement("div");		objBottomNav.setAttribute('id','lbBottomNav');		objDetailsData.appendChild(objBottomNav);	var objPrev = this.doc.createElement("a");		objPrev.setAttribute('id','lbPrev');		objPrev.setAttribute((this.ie ? 'className' : 'class'), this.theme);		objPrev.setAttribute('href','#');		objHoverNav.appendChild(objPrev);	var objNext = this.doc.createElement("a");		objNext.setAttribute('id','lbNext');		objNext.setAttribute((this.ie ? 'className' : 'class'), this.theme);		objNext.setAttribute('href','#');		objHoverNav.appendChild(objNext);	var objNumberDisplay = this.doc.createElement("span");		objNumberDisplay.setAttribute('id','lbNumberDisplay');		objDetails.appendChild(objNumberDisplay);	var objNavDisplay = this.doc.createElement("span");		objNavDisplay.setAttribute('id','lbNavDisplay');		objNavDisplay.style.display = 'none';		objDetails.appendChild(objNavDisplay);	var objClose = this.doc.createElement("a");		objClose.setAttribute('id','lbClose');		objClose.setAttribute((this.ie ? 'className' : 'class'), this.theme);		objClose.setAttribute('href','#');		objBottomNav.appendChild(objClose);	var objPause = this.doc.createElement("a");		objPause.setAttribute('id','lbPause');		objPause.setAttribute((this.ie ? 'className' : 'class'), this.theme);		objPause.setAttribute('href','#');		objPause.style.display = 'none';		objBottomNav.appendChild(objPause);	var objPlay = this.doc.createElement("a");		objPlay.setAttribute('id','lbPlay');		objPlay.setAttribute((this.ie ? 'className' : 'class'), this.theme);		objPlay.setAttribute('href','#');		objPlay.style.display = 'none';		objBottomNav.appendChild(objPlay);};LyteBox.prototype.updateLyteboxItems = function() {		var anchors = (this.isFrame) ? window.parent.frames[window.name].document.getElementsByTagName('a') : document.getElementsByTagName('a');	for (var i = 0; i < anchors.length; i++) {		var anchor = anchors[i];		var relAttribute = String(anchor.getAttribute('rel'));		if (anchor.getAttribute('href')) {			if (relAttribute.toLowerCase().match('lytebox')) {				anchor.onclick = function () { myLytebox.start(this, false, false); return false; }			} else if (relAttribute.toLowerCase().match('lyteshow')) {				anchor.onclick = function () { myLytebox.start(this, true, false); return false; }			} else if (relAttribute.toLowerCase().match('lyteframe')) {				anchor.onclick = function () { myLytebox.start(this, false, true); return false; }			}		}	}};LyteBox.prototype.start = function(imageLink, doSlide, doFrame) {	if (this.ie && !this.ie7) {	this.toggleSelects('hide');	}	if (this.hideFlash) { this.toggleFlash('hide'); }	this.isLyteframe = (doFrame ? true : false);	var pageSize	= this.getPageSize();	var objOverlay	= this.doc.getElementById('lbOverlay');	var objBody		= this.doc.getElementsByTagName("body").item(0);	objOverlay.style.height = pageSize[1] + "px";	objOverlay.style.display = '';	this.appear('lbOverlay', (this.doAnimations ? 0 : this.maxOpacity));	var anchors = (this.isFrame) ? window.parent.frames[window.name].document.getElementsByTagName('a') : document.getElementsByTagName('a');	if (this.isLyteframe) {		this.frameArray = [];		this.frameNum = 0;		if ((imageLink.getAttribute('rel') == 'lyteframe')) {			var rev = imageLink.getAttribute('rev');			this.frameArray.push(new Array(imageLink.getAttribute('href'), imageLink.getAttribute('title'), (rev == null || rev == '' ? 'width: 400px; height: 400px; scrolling: auto;' : rev)));		} else {			if (imageLink.getAttribute('rel').indexOf('lyteframe') != -1) {				for (var i = 0; i < anchors.length; i++) {					var anchor = anchors[i];					if (anchor.getAttribute('href') && (anchor.getAttribute('rel') == imageLink.getAttribute('rel'))) {						var rev = anchor.getAttribute('rev');						this.frameArray.push(new Array(anchor.getAttribute('href'), anchor.getAttribute('title'), (rev == null || rev == '' ? 'width: 400px; height: 400px; scrolling: auto;' : rev)));					}				}				this.frameArray.removeDuplicates();				while(this.frameArray[this.frameNum][0] != imageLink.getAttribute('href')) { this.frameNum++; }			}		}	} else {		this.imageArray = [];		this.imageNum = 0;		this.slideArray = [];		this.slideNum = 0;		if ((imageLink.getAttribute('rel') == 'lytebox')) {			this.imageArray.push(new Array(imageLink.getAttribute('href'), imageLink.getAttribute('title')));		} else {			if (imageLink.getAttribute('rel').indexOf('lytebox') != -1) {				for (var i = 0; i < anchors.length; i++) {					var anchor = anchors[i];					if (anchor.getAttribute('href') && (anchor.getAttribute('rel') == imageLink.getAttribute('rel'))) {						this.imageArray.push(new Array(anchor.getAttribute('href'), anchor.getAttribute('title')));					}				}				this.imageArray.removeDuplicates();				while(this.imageArray[this.imageNum][0] != imageLink.getAttribute('href')) { this.imageNum++; }			}			if (imageLink.getAttribute('rel').indexOf('lyteshow') != -1) {				for (var i = 0; i < anchors.length; i++) {					var anchor = anchors[i];					if (anchor.getAttribute('href') && (anchor.getAttribute('rel') == imageLink.getAttribute('rel'))) {						this.slideArray.push(new Array(anchor.getAttribute('href'), anchor.getAttribute('title')));					}				}				this.slideArray.removeDuplicates();				while(this.slideArray[this.slideNum][0] != imageLink.getAttribute('href')) { this.slideNum++; }			}		}	}	var object = this.doc.getElementById('lbMain');		object.style.top = (this.getPageScroll() + (pageSize[3] / 15)) + "px";		object.style.display = '';	if (!this.outerBorder) {		this.doc.getElementById('lbOuterContainer').style.border = 'none';		this.doc.getElementById('lbDetailsContainer').style.border = 'none';	} else {		this.doc.getElementById('lbOuterContainer').style.borderBottom = '';		this.doc.getElementById('lbOuterContainer').setAttribute((this.ie ? 'className' : 'class'), this.theme);	}	this.doc.getElementById('lbOverlay').onclick = function() { myLytebox.end(); return false; }	this.doc.getElementById('lbMain').onclick = function(e) {		var e = e;		if (!e) {			if (window.parent.frames[window.name] && (parent.document.getElementsByTagName('frameset').length <= 0)) {				e = window.parent.window.event;			} else {				e = window.event;			}		}		var id = (e.target ? e.target.id : e.srcElement.id);		if (id == 'lbMain') { myLytebox.end(); return false; }	}	this.doc.getElementById('lbClose').onclick = function() { myLytebox.end(); return false; }	this.doc.getElementById('lbPause').onclick = function() { myLytebox.togglePlayPause("lbPause", "lbPlay"); return false; }	this.doc.getElementById('lbPlay').onclick = function() { myLytebox.togglePlayPause("lbPlay", "lbPause"); return false; }		this.isSlideshow = doSlide;	this.isPaused = (this.slideNum != 0 ? true : false);	if (this.isSlideshow && this.showPlayPause && this.isPaused) {		this.doc.getElementById('lbPlay').style.display = '';		this.doc.getElementById('lbPause').style.display = 'none';	}	if (this.isLyteframe) {		this.changeContent(this.frameNum);	} else {		if (this.isSlideshow) {			this.changeContent(this.slideNum);		} else {			this.changeContent(this.imageNum);		}	}};LyteBox.prototype.changeContent = function(imageNum) {	if (this.isSlideshow) {		for (var i = 0; i < this.slideshowIDCount; i++) { window.clearTimeout(this.slideshowIDArray[i]); }	}	this.activeImage = this.activeSlide = this.activeFrame = imageNum;	if (!this.outerBorder) {		this.doc.getElementById('lbOuterContainer').style.border = 'none';		this.doc.getElementById('lbDetailsContainer').style.border = 'none';	} else {		this.doc.getElementById('lbOuterContainer').style.borderBottom = '';		this.doc.getElementById('lbOuterContainer').setAttribute((this.ie ? 'className' : 'class'), this.theme);	}	this.doc.getElementById('lbLoading').style.display = '';	this.doc.getElementById('lbImage').style.display = 'none';	this.doc.getElementById('lbIframe').style.display = 'none';	this.doc.getElementById('lbPrev').style.display = 'none';	this.doc.getElementById('lbNext').style.display = 'none';	this.doc.getElementById('lbIframeContainer').style.display = 'none';	this.doc.getElementById('lbDetailsContainer').style.display = 'none';	this.doc.getElementById('lbNumberDisplay').style.display = 'none';	if (this.navType == 2 || this.isLyteframe) {		object = this.doc.getElementById('lbNavDisplay');		object.innerHTML = '&nbsp;&nbsp;&nbsp;<span id="lbPrev2_Off" style="display: none;" class="' + this.theme + '">&laquo; prev</span><a href="#" id="lbPrev2" class="' + this.theme + '" style="display: none;">&laquo; prev</a> <b id="lbSpacer" class="' + this.theme + '">||</b> <span id="lbNext2_Off" style="display: none;" class="' + this.theme + '">next &raquo;</span><a href="#" id="lbNext2" class="' + this.theme + '" style="display: none;">next &raquo;</a>';		object.style.display = 'none';	}	if (this.isLyteframe) {		var iframe = myLytebox.doc.getElementById('lbIframe');		var styles = this.frameArray[this.activeFrame][2];		var aStyles = styles.split(';');		for (var i = 0; i < aStyles.length; i++) {			if (aStyles[i].indexOf('width:') >= 0) {				var w = aStyles[i].replace('width:', '');				iframe.width = w.trim();			} else if (aStyles[i].indexOf('height:') >= 0) {				var h = aStyles[i].replace('height:', '');				iframe.height = h.trim();			} else if (aStyles[i].indexOf('scrolling:') >= 0) {				var s = aStyles[i].replace('scrolling:', '');				iframe.scrolling = s.trim();			} else if (aStyles[i].indexOf('border:') >= 0) {				// Not implemented yet, as there are cross-platform issues with setting the border (from a GUI standpoint)				//var b = aStyles[i].replace('border:', '');				//iframe.style.border = b.trim();			}		}		this.resizeContainer(parseInt(iframe.width), parseInt(iframe.height));	} else {		imgPreloader = new Image();		imgPreloader.onload = function() {			var imageWidth = imgPreloader.width;			var imageHeight = imgPreloader.height;			if (myLytebox.autoResize) {				var pagesize = myLytebox.getPageSize();				var x = pagesize[2] - 150;				var y = pagesize[3] - 150;				if (imageWidth > x) {					imageHeight = Math.round(imageHeight * (x / imageWidth));					imageWidth = x; 					if (imageHeight > y) { 						imageWidth = Math.round(imageWidth * (y / imageHeight));						imageHeight = y; 					}				} else if (imageHeight > y) { 					imageWidth = Math.round(imageWidth * (y / imageHeight));					imageHeight = y; 					if (imageWidth > x) {						imageHeight = Math.round(imageHeight * (x / imageWidth));						imageWidth = x;					}				}			}			var lbImage = myLytebox.doc.getElementById('lbImage')			lbImage.src = (myLytebox.isSlideshow ? myLytebox.slideArray[myLytebox.activeSlide][0] : myLytebox.imageArray[myLytebox.activeImage][0]);			lbImage.width = imageWidth;			lbImage.height = imageHeight;			myLytebox.resizeContainer(imageWidth, imageHeight);			imgPreloader.onload = function() {};		}		imgPreloader.src = (this.isSlideshow ? this.slideArray[this.activeSlide][0] : this.imageArray[this.activeImage][0]);	}};LyteBox.prototype.resizeContainer = function(imgWidth, imgHeight) {	this.wCur = this.doc.getElementById('lbOuterContainer').offsetWidth;	this.hCur = this.doc.getElementById('lbOuterContainer').offsetHeight;	this.xScale = ((imgWidth  + (this.borderSize * 2)) / this.wCur) * 100;	this.yScale = ((imgHeight  + (this.borderSize * 2)) / this.hCur) * 100;	var wDiff = (this.wCur - this.borderSize * 2) - imgWidth;	var hDiff = (this.hCur - this.borderSize * 2) - imgHeight;	if (!(hDiff == 0)) {		this.hDone = false;		this.resizeH('lbOuterContainer', this.hCur, imgHeight + this.borderSize*2, this.getPixelRate(this.hCur, imgHeight));	} else {		this.hDone = true;	}	if (!(wDiff == 0)) {		this.wDone = false;		this.resizeW('lbOuterContainer', this.wCur, imgWidth + this.borderSize*2, this.getPixelRate(this.wCur, imgWidth));	} else {		this.wDone = true;	}	if ((hDiff == 0) && (wDiff == 0)) {		if (this.ie){ this.pause(250); } else { this.pause(100); } 	}	this.doc.getElementById('lbPrev').style.height = imgHeight + "px";	this.doc.getElementById('lbNext').style.height = imgHeight + "px";	this.doc.getElementById('lbDetailsContainer').style.width = (imgWidth + (this.borderSize * 2) + (this.ie && this.doc.compatMode == "BackCompat" && this.outerBorder ? 2 : 0)) + "px";	this.showContent();};LyteBox.prototype.showContent = function() {	if (this.wDone && this.hDone) {		for (var i = 0; i < this.showContentTimerCount; i++) { window.clearTimeout(this.showContentTimerArray[i]); }		if (this.outerBorder) {			this.doc.getElementById('lbOuterContainer').style.borderBottom = 'none';		}		this.doc.getElementById('lbLoading').style.display = 'none';		if (this.isLyteframe) {			this.doc.getElementById('lbIframe').style.display = '';			this.appear('lbIframe', (this.doAnimations ? 0 : 100));		} else {			this.doc.getElementById('lbImage').style.display = '';			this.appear('lbImage', (this.doAnimations ? 0 : 100));			this.preloadNeighborImages();		}		if (this.isSlideshow) {			if(this.activeSlide == (this.slideArray.length - 1)) {				if (this.autoEnd) {					this.slideshowIDArray[this.slideshowIDCount++] = setTimeout("myLytebox.end('slideshow')", this.slideInterval);				}			} else {				if (!this.isPaused) {					this.slideshowIDArray[this.slideshowIDCount++] = setTimeout("myLytebox.changeContent("+(this.activeSlide+1)+")", this.slideInterval);				}			}			this.doc.getElementById('lbHoverNav').style.display = (this.showNavigation && this.navType == 1 ? '' : 'none');			this.doc.getElementById('lbClose').style.display = (this.showClose ? '' : 'none');			this.doc.getElementById('lbDetails').style.display = (this.showDetails ? '' : 'none');			this.doc.getElementById('lbPause').style.display = (this.showPlayPause && !this.isPaused ? '' : 'none');			this.doc.getElementById('lbPlay').style.display = (this.showPlayPause && !this.isPaused ? 'none' : '');			this.doc.getElementById('lbNavDisplay').style.display = (this.showNavigation && this.navType == 2 ? '' : 'none');		} else {			this.doc.getElementById('lbHoverNav').style.display = (this.navType == 1 && !this.isLyteframe ? '' : 'none');			if ((this.navType == 2 && !this.isLyteframe && this.imageArray.length > 1) || (this.frameArray.length > 1 && this.isLyteframe)) {				this.doc.getElementById('lbNavDisplay').style.display = '';			} else {				this.doc.getElementById('lbNavDisplay').style.display = 'none';			}			this.doc.getElementById('lbClose').style.display = '';			this.doc.getElementById('lbDetails').style.display = '';			this.doc.getElementById('lbPause').style.display = 'none';			this.doc.getElementById('lbPlay').style.display = 'none';		}		this.doc.getElementById('lbImageContainer').style.display = (this.isLyteframe ? 'none' : '');		this.doc.getElementById('lbIframeContainer').style.display = (this.isLyteframe ? '' : 'none');		try {			this.doc.getElementById('lbIframe').src = this.frameArray[this.activeFrame][0];		} catch(e) { }	} else {		this.showContentTimerArray[this.showContentTimerCount++] = setTimeout("myLytebox.showContent()", 200);	}};LyteBox.prototype.updateDetails = function() {	var object = this.doc.getElementById('lbCaption');	var sTitle = (this.isSlideshow ? this.slideArray[this.activeSlide][1] : (this.isLyteframe ? this.frameArray[this.activeFrame][1] : this.imageArray[this.activeImage][1]));	object.style.display = '';	object.innerHTML = (sTitle == null ? '' : sTitle);	this.updateNav();	this.doc.getElementById('lbDetailsContainer').style.display = '';	object = this.doc.getElementById('lbNumberDisplay');	if (this.isSlideshow && this.slideArray.length > 1) {		object.style.display = '';		object.innerHTML = "Image " + eval(this.activeSlide + 1) + " of " + this.slideArray.length;		this.doc.getElementById('lbNavDisplay').style.display = (this.navType == 2 && this.showNavigation ? '' : 'none');	} else if (this.imageArray.length > 1 && !this.isLyteframe) {		object.style.display = '';		object.innerHTML = "Image " + eval(this.activeImage + 1) + " of " + this.imageArray.length;		this.doc.getElementById('lbNavDisplay').style.display = (this.navType == 2 ? '' : 'none');	} else if (this.frameArray.length > 1 && this.isLyteframe) {		object.style.display = '';		object.innerHTML = "Page " + eval(this.activeFrame + 1) + " of " + this.frameArray.length;		this.doc.getElementById('lbNavDisplay').style.display = '';	} else {		this.doc.getElementById('lbNavDisplay').style.display = 'none';	}	this.appear('lbDetailsContainer', (this.doAnimations ? 0 : 100));};LyteBox.prototype.updateNav = function() {	if (this.isSlideshow) {		if (this.activeSlide != 0) {			var object = (this.navType == 2 ? this.doc.getElementById('lbPrev2') : this.doc.getElementById('lbPrev'));				object.style.display = '';				object.onclick = function() {					if (myLytebox.pauseOnPrevClick) { myLytebox.togglePlayPause("lbPause", "lbPlay"); }					myLytebox.changeContent(myLytebox.activeSlide - 1); return false;				}		} else {			if (this.navType == 2) { this.doc.getElementById('lbPrev2_Off').style.display = ''; }		}		if (this.activeSlide != (this.slideArray.length - 1)) {			var object = (this.navType == 2 ? this.doc.getElementById('lbNext2') : this.doc.getElementById('lbNext'));				object.style.display = '';				object.onclick = function() {					if (myLytebox.pauseOnNextClick) { myLytebox.togglePlayPause("lbPause", "lbPlay"); }					myLytebox.changeContent(myLytebox.activeSlide + 1); return false;				}		} else {			if (this.navType == 2) { this.doc.getElementById('lbNext2_Off').style.display = ''; }		}	} else if (this.isLyteframe) {		if(this.activeFrame != 0) {			var object = this.doc.getElementById('lbPrev2');				object.style.display = '';				object.onclick = function() {					myLytebox.changeContent(myLytebox.activeFrame - 1); return false;				}		} else {			this.doc.getElementById('lbPrev2_Off').style.display = '';		}		if(this.activeFrame != (this.frameArray.length - 1)) {			var object = this.doc.getElementById('lbNext2');				object.style.display = '';				object.onclick = function() {					myLytebox.changeContent(myLytebox.activeFrame + 1); return false;				}		} else {			this.doc.getElementById('lbNext2_Off').style.display = '';		}			} else {		if(this.activeImage != 0) {			var object = (this.navType == 2 ? this.doc.getElementById('lbPrev2') : this.doc.getElementById('lbPrev'));				object.style.display = '';				object.onclick = function() {					myLytebox.changeContent(myLytebox.activeImage - 1); return false;				}		} else {			if (this.navType == 2) { this.doc.getElementById('lbPrev2_Off').style.display = ''; }		}		if(this.activeImage != (this.imageArray.length - 1)) {			var object = (this.navType == 2 ? this.doc.getElementById('lbNext2') : this.doc.getElementById('lbNext'));				object.style.display = '';				object.onclick = function() {					myLytebox.changeContent(myLytebox.activeImage + 1); return false;				}		} else {			if (this.navType == 2) { this.doc.getElementById('lbNext2_Off').style.display = ''; }		}	}	this.enableKeyboardNav();};LyteBox.prototype.enableKeyboardNav = function() { document.onkeydown = this.keyboardAction; };LyteBox.prototype.disableKeyboardNav = function() { document.onkeydown = ''; };LyteBox.prototype.keyboardAction = function(e) {	var keycode = key = escape = null;	keycode	= (e == null) ? event.keyCode : e.which;	key		= String.fromCharCode(keycode).toLowerCase();	escape  = (e == null) ? 27 : e.DOM_VK_ESCAPE;	if ((key == 'x') || (key == 'c') || (keycode == escape)) {		myLytebox.end();	} else if ((key == 'p') || (keycode == 37)) {		if (myLytebox.isSlideshow) {			if(myLytebox.activeSlide != 0) {				myLytebox.disableKeyboardNav();				myLytebox.changeContent(myLytebox.activeSlide - 1);			}		} else if (myLytebox.isLyteframe) {			if(myLytebox.activeFrame != 0) {				myLytebox.disableKeyboardNav();				myLytebox.changeContent(myLytebox.activeFrame - 1);			}		} else {			if(myLytebox.activeImage != 0) {				myLytebox.disableKeyboardNav();				myLytebox.changeContent(myLytebox.activeImage - 1);			}		}	} else if ((key == 'n') || (keycode == 39)) {		if (myLytebox.isSlideshow) {			if(myLytebox.activeSlide != (myLytebox.slideArray.length - 1)) {				myLytebox.disableKeyboardNav();				myLytebox.changeContent(myLytebox.activeSlide + 1);			}		} else if (myLytebox.isLyteframe) {			if(myLytebox.activeFrame != (myLytebox.frameArray.length - 1)) {				myLytebox.disableKeyboardNav();				myLytebox.changeContent(myLytebox.activeFrame + 1);			}		} else {			if(myLytebox.activeImage != (myLytebox.imageArray.length - 1)) {				myLytebox.disableKeyboardNav();				myLytebox.changeContent(myLytebox.activeImage + 1);			}		}	}};LyteBox.prototype.preloadNeighborImages = function() {	if (this.isSlideshow) {		if ((this.slideArray.length - 1) > this.activeSlide) {			preloadNextImage = new Image();			preloadNextImage.src = this.slideArray[this.activeSlide + 1][0];		}		if(this.activeSlide > 0) {			preloadPrevImage = new Image();			preloadPrevImage.src = this.slideArray[this.activeSlide - 1][0];		}	} else {		if ((this.imageArray.length - 1) > this.activeImage) {			preloadNextImage = new Image();			preloadNextImage.src = this.imageArray[this.activeImage + 1][0];		}		if(this.activeImage > 0) {			preloadPrevImage = new Image();			preloadPrevImage.src = this.imageArray[this.activeImage - 1][0];		}	}};LyteBox.prototype.togglePlayPause = function(hideID, showID) {	if (this.isSlideshow && hideID == "lbPause") {		for (var i = 0; i < this.slideshowIDCount; i++) { window.clearTimeout(this.slideshowIDArray[i]); }	}	this.doc.getElementById(hideID).style.display = 'none';	this.doc.getElementById(showID).style.display = '';	if (hideID == "lbPlay") {		this.isPaused = false;		if (this.activeSlide == (this.slideArray.length - 1)) {			this.end();		} else {			this.changeContent(this.activeSlide + 1);		}	} else {		this.isPaused = true;	}};LyteBox.prototype.end = function(caller) {	var closeClick = (caller == 'slideshow' ? false : true);	if (this.isSlideshow && this.isPaused && !closeClick) { return; }	this.disableKeyboardNav();	this.doc.getElementById('lbMain').style.display = 'none';	this.fade('lbOverlay', (this.doAnimations ? this.maxOpacity : 0));	this.toggleSelects('visible');	if (this.hideFlash) { this.toggleFlash('visible'); }	if (this.isSlideshow) {		for (var i = 0; i < this.slideshowIDCount; i++) { window.clearTimeout(this.slideshowIDArray[i]); }	}	if (this.isLyteframe) {		 this.initialize();	}};LyteBox.prototype.checkFrame = function() {	if (window.parent.frames[window.name] && (parent.document.getElementsByTagName('frameset').length <= 0)) {		this.isFrame = true;		this.lytebox = "window.parent." + window.name + ".myLytebox";		this.doc = parent.document;	} else {		this.isFrame = false;		this.lytebox = "myLytebox";		this.doc = document;	}};LyteBox.prototype.getPixelRate = function(cur, img) {	var diff = (img > cur) ? img - cur : cur - img;	if (diff >= 0 && diff <= 100) { return 10; }	if (diff > 100 && diff <= 200) { return 15; }	if (diff > 200 && diff <= 300) { return 20; }	if (diff > 300 && diff <= 400) { return 25; }	if (diff > 400 && diff <= 500) { return 30; }	if (diff > 500 && diff <= 600) { return 35; }	if (diff > 600 && diff <= 700) { return 40; }	if (diff > 700) { return 45; }};LyteBox.prototype.appear = function(id, opacity) {	var object = this.doc.getElementById(id).style;	object.opacity = (opacity / 100);	object.MozOpacity = (opacity / 100);	object.KhtmlOpacity = (opacity / 100);	object.filter = "alpha(opacity=" + (opacity + 10) + ")";	if (opacity == 100 && (id == 'lbImage' || id == 'lbIframe')) {		try { object.removeAttribute("filter"); } catch(e) {}	/* Fix added for IE Alpha Opacity Filter bug. */		this.updateDetails();	} else if (opacity >= this.maxOpacity && id == 'lbOverlay') {		for (var i = 0; i < this.overlayTimerCount; i++) { window.clearTimeout(this.overlayTimerArray[i]); }		return;	} else if (opacity >= 100 && id == 'lbDetailsContainer') {		try { object.removeAttribute("filter"); } catch(e) {}	/* Fix added for IE Alpha Opacity Filter bug. */		for (var i = 0; i < this.imageTimerCount; i++) { window.clearTimeout(this.imageTimerArray[i]); }		this.doc.getElementById('lbOverlay').style.height = this.getPageSize()[1] + "px";	} else {		if (id == 'lbOverlay') {			this.overlayTimerArray[this.overlayTimerCount++] = setTimeout("myLytebox.appear('" + id + "', " + (opacity+20) + ")", 1);		} else {			this.imageTimerArray[this.imageTimerCount++] = setTimeout("myLytebox.appear('" + id + "', " + (opacity+10) + ")", 1);		}	}};LyteBox.prototype.fade = function(id, opacity) {	var object = this.doc.getElementById(id).style;	object.opacity = (opacity / 100);	object.MozOpacity = (opacity / 100);	object.KhtmlOpacity = (opacity / 100);	object.filter = "alpha(opacity=" + opacity + ")";	if (opacity <= 0) {		try {			object.display = 'none';		} catch(err) { }	} else if (id == 'lbOverlay') {		this.overlayTimerArray[this.overlayTimerCount++] = setTimeout("myLytebox.fade('" + id + "', " + (opacity-20) + ")", 1);	} else {		this.timerIDArray[this.timerIDCount++] = setTimeout("myLytebox.fade('" + id + "', " + (opacity-10) + ")", 1);	}};LyteBox.prototype.resizeW = function(id, curW, maxW, pixelrate, speed) {	if (!this.hDone) {		this.resizeWTimerArray[this.resizeWTimerCount++] = setTimeout("myLytebox.resizeW('" + id + "', " + curW + ", " + maxW + ", " + pixelrate + ")", 100);		return;	}	var object = this.doc.getElementById(id);	var timer = speed ? speed : (this.resizeDuration/2);	var newW = (this.doAnimations ? curW : maxW);	object.style.width = (newW) + "px";	if (newW < maxW) {		newW += (newW + pixelrate >= maxW) ? (maxW - newW) : pixelrate;	} else if (newW > maxW) {		newW -= (newW - pixelrate <= maxW) ? (newW - maxW) : pixelrate;	}	this.resizeWTimerArray[this.resizeWTimerCount++] = setTimeout("myLytebox.resizeW('" + id + "', " + newW + ", " + maxW + ", " + pixelrate + ", " + (timer+0.02) + ")", timer+0.02);	if (parseInt(object.style.width) == maxW) {		this.wDone = true;		for (var i = 0; i < this.resizeWTimerCount; i++) { window.clearTimeout(this.resizeWTimerArray[i]); }	}};LyteBox.prototype.resizeH = function(id, curH, maxH, pixelrate, speed) {	var timer = speed ? speed : (this.resizeDuration/2);	var object = this.doc.getElementById(id);	var newH = (this.doAnimations ? curH : maxH);	object.style.height = (newH) + "px";	if (newH < maxH) {		newH += (newH + pixelrate >= maxH) ? (maxH - newH) : pixelrate;	} else if (newH > maxH) {		newH -= (newH - pixelrate <= maxH) ? (newH - maxH) : pixelrate;	}	this.resizeHTimerArray[this.resizeHTimerCount++] = setTimeout("myLytebox.resizeH('" + id + "', " + newH + ", " + maxH + ", " + pixelrate + ", " + (timer+.02) + ")", timer+.02);	if (parseInt(object.style.height) == maxH) {		this.hDone = true;		for (var i = 0; i < this.resizeHTimerCount; i++) { window.clearTimeout(this.resizeHTimerArray[i]); }	}};LyteBox.prototype.getPageScroll = function() {	if (self.pageYOffset) {		return this.isFrame ? parent.pageYOffset : self.pageYOffset;	} else if (this.doc.documentElement && this.doc.documentElement.scrollTop){		return this.doc.documentElement.scrollTop;	} else if (document.body) {		return this.doc.body.scrollTop;	}};LyteBox.prototype.getPageSize = function() {		var xScroll, yScroll, windowWidth, windowHeight;	if (window.innerHeight && window.scrollMaxY) {		xScroll = this.doc.scrollWidth;		yScroll = (this.isFrame ? parent.innerHeight : self.innerHeight) + (this.isFrame ? parent.scrollMaxY : self.scrollMaxY);	} else if (this.doc.body.scrollHeight > this.doc.body.offsetHeight){		xScroll = this.doc.body.scrollWidth;		yScroll = this.doc.body.scrollHeight;	} else {		xScroll = this.doc.getElementsByTagName("html").item(0).offsetWidth;		yScroll = this.doc.getElementsByTagName("html").item(0).offsetHeight;		xScroll = (xScroll < this.doc.body.offsetWidth) ? this.doc.body.offsetWidth : xScroll;		yScroll = (yScroll < this.doc.body.offsetHeight) ? this.doc.body.offsetHeight : yScroll;	}	if (self.innerHeight) {		windowWidth = (this.isFrame) ? parent.innerWidth : self.innerWidth;		windowHeight = (this.isFrame) ? parent.innerHeight : self.innerHeight;	} else if (document.documentElement && document.documentElement.clientHeight) {		windowWidth = this.doc.documentElement.clientWidth;		windowHeight = this.doc.documentElement.clientHeight;	} else if (document.body) {		windowWidth = this.doc.getElementsByTagName("html").item(0).clientWidth;		windowHeight = this.doc.getElementsByTagName("html").item(0).clientHeight;		windowWidth = (windowWidth == 0) ? this.doc.body.clientWidth : windowWidth;		windowHeight = (windowHeight == 0) ? this.doc.body.clientHeight : windowHeight;	}	var pageHeight = (yScroll < windowHeight) ? windowHeight : yScroll;	var pageWidth = (xScroll < windowWidth) ? windowWidth : xScroll;	return new Array(pageWidth, pageHeight, windowWidth, windowHeight);};LyteBox.prototype.toggleFlash = function(state) {	var objects = this.doc.getElementsByTagName("object");	for (var i = 0; i < objects.length; i++) {		objects[i].style.visibility = (state == "hide") ? 'hidden' : 'visible';	}	var embeds = this.doc.getElementsByTagName("embed");	for (var i = 0; i < embeds.length; i++) {		embeds[i].style.visibility = (state == "hide") ? 'hidden' : 'visible';	}	if (this.isFrame) {		for (var i = 0; i < parent.frames.length; i++) {			try {				objects = parent.frames[i].window.document.getElementsByTagName("object");				for (var j = 0; j < objects.length; j++) {					objects[j].style.visibility = (state == "hide") ? 'hidden' : 'visible';				}			} catch(e) { }			try {				embeds = parent.frames[i].window.document.getElementsByTagName("embed");				for (var j = 0; j < embeds.length; j++) {					embeds[j].style.visibility = (state == "hide") ? 'hidden' : 'visible';				}			} catch(e) { }		}	}};LyteBox.prototype.toggleSelects = function(state) {	var selects = this.doc.getElementsByTagName("select");	for (var i = 0; i < selects.length; i++ ) {		selects[i].style.visibility = (state == "hide") ? 'hidden' : 'visible';	}	if (this.isFrame) {		for (var i = 0; i < parent.frames.length; i++) {			try {				selects = parent.frames[i].window.document.getElementsByTagName("select");				for (var j = 0; j < selects.length; j++) {					selects[j].style.visibility = (state == "hide") ? 'hidden' : 'visible';				}			} catch(e) { }		}	}};LyteBox.prototype.pause = function(numberMillis) {	var now = new Date();	var exitTime = now.getTime() + numberMillis;	while (true) {		now = new Date();		if (now.getTime() > exitTime) { return; }	}};if (window.addEventListener) {	window.addEventListener("load",initLytebox,false);} else if (window.attachEvent) {	window.attachEvent("onload",initLytebox);} else {	window.onload = function() {initLytebox();}}function initLytebox() { myLytebox = new LyteBox(); }//--></script>   		<link rel="stylesheet" href="http://www.univ-nantes.fr/jsp/scripts/lytebox/lytebox.css" type="text/css" media="screen" />		<script type="text/javascript" src="http://s7.addthis.com/js/250/addthis_widget.js"></script>                <script type="text/javascript">                        addthis_pub             = 'UnivNantes';                        addthis_logo_background = '020a23';                        addthis_logo_color      = '020a23';                        addthis_language        = 'fr';                        var addthis_localize = {                                share_caption: "Partager"                        };                </script>        </head>        <script type="text/javascript"  style="display:none"><!--document.write('<body class="pagelibre interieur institutionnel institutionnel" id="body">');//--></script>		<p id="acces_direct"><a href="#contenu_sans_nav_avec_encadres" accesskey="s">Acc&egrave;s direct au contenu</a></p>		<div id="bandeau">		        <script type="text/javascript" src="http://www.univ-nantes.fr/jsp/template/elements_externes.jsp?LANGUE=0&ELEMENT=recherche&RUBRIQUE=ENS"></script>		        <script type="text/javascript"  style="display:none"><!--					 			document.write('<h1><a href="http://www.univ-nantes.fr/36392593/0/fiche___pagelibre/&amp;RF=INSTITUTIONNEL_FR" title="Retour &agrave; la page d\'accueil" accesskey="1"><img src="http://www.univ-nantes.fr/images/logo.png?new=2012050301" alt="Site de l\'Université" /></a></h1>');		//--></script>			<script type="text/javascript" src="http://www.univ-nantes.fr/jsp/template/elements_externes.jsp?LANGUE=0&RUBRIQUE=ENS&ELEMENT=accespratiques"></script>		<script type="text/javascript" src="http://www.univ-nantes.fr/jsp/template/elements_externes.jsp?LANGUE=0&RUBRIQUE=ENS&ELEMENT=langue"></script>					</div> <!-- #bandeau -->		<div id="menu">			                           <script type="text/javascript" src="http://www.univ-nantes.fr/jsp/template/elements_externes.jsp?LANGUE=0&RUBRIQUE=ENS&ELEMENT=menuprincipal"></script>                  			</div><!-- #menu -->						<div id="page">			<p id="fil_ariane">&nbsp;</p>			<div id="contenu_deco" class="contenu_sans_nav_avec_encadres">				<h2>D&eacute;mo</h2>				<div id="bookmarks_texte">				        <script type="text/javascript"  style="display:none"><!--		document.write('				<div class="addthis_toolbox addthis_default_style addthis_16x16_style">');		document.write('					<a class="addthis_button_twitter" tw:via="UnivNantes"></a>');		document.write('					<a class="addthis_button_facebook"></a>');		document.write('					<a class="addthis_button_google_plusone_share"></a>');		document.write('					<a class="addthis_button_email"></a>');		document.write('					<a class="addthis_button_compact"></a>');		document.write('					<a class="addthis_counter addthis_bubble_style"></a>');		document.write('				</div>');//--></script>				</div><!-- #bookmarks_texte -->